Here is a Java class representing playing cards:
"""
package nz.ac.auckland.softeng281.a2;

/**
 * You should not change this class
 */
public class Card {

    public enum Rank {
        ACE(11), TWO(2), THREE(3), FOUR(4), FIVE(5), SIX(6), SEVEN(7), EIGHT(8), NINE(9), TEN(10), JACK(10), QUEEN(10), KING(10);

        public final int value;

        Rank(int value) {
            this.value = value;
        }

    }

    public enum Suit {
        HEARTS, DIAMONDS, SPADES, CLUBS
    }

    private Rank rank;
    private Suit suit;

    public Card(Rank face, Suit suit) {
        this.rank = face;
        this.suit = suit;
    }

    public Rank getRank() {
        return rank;
    }

    public Suit getSuit() {
        return suit;
    }

    /**
     * card template for printing
     */
    public static final char[][] template = {
            "\u250c\u2500\u2500\u2500\u2500\u2500\u2510".toCharArray(),
            "\u2502?    \u2502".toCharArray(),
            "\u2502  *  \u2502".toCharArray(),
            "\u2502    ?\u2502".toCharArray(),
            "\u2514\u2500\u2500\u2500\u2500\u2500\u2518".toCharArray()
    };

    private char convertIntToChar(int number) {
        // adding plus 0 is a trick to get the char value out of an integer
        return (char) (number + '0');
    }


    public char[][] getCardToPrint() {
        // lets reuse template, do not create additional objects
        // the 10 card is a special case because 10 has 2 digits
        if (rank == Rank.TEN) {
            // fill the template
            template[1][1] = convertIntToChar(1);
            template[1][2] = convertIntToChar(0);
            template[3][4] = convertIntToChar(1);
            template[3][5] = convertIntToChar(0);
        } else {
            // lets clean the template in case we just printed a number 10
            template[1][2] = ' ';
            template[3][4] = ' ';
            // fill the template
            template[1][1] = this.getPrintableRank();
            template[3][5] = this.getPrintableRank();
        }
        template[2][3] = this.getPrintableSuit();
        return template;
    }

    private char getPrintableSuit() {
        switch (suit) {
            case HEARTS:
                return '\u2665';
            case DIAMONDS:
                return '\u2666';
            case SPADES:
                return '\u2660';
            case CLUBS:
                return '\u2663';
            default:
                // execute here should be impossible since SUIT has only those 4 possible values
                throw new RuntimeException("something is incredibly wrong");
        }
    }

    private char getPrintableRank() {
        switch (rank) {
            case ACE:
                return 'A';
            case JACK:
                return 'J';
            case QUEEN:
                return 'Q';
            case KING:
                return 'K';
            default:
                return convertIntToChar(rank.value);
        }
    }

}

"""
In the following java class, I need you to complete the missing methods based on these instructions:
The dealer decides Action.HIT if its current hand is losing against at least 2 playersâ€™ current hands,
otherwise, the dealer decides Action.HOLD.
"""
package nz.ac.auckland.softeng281.a2;

import java.util.List;
import java.util.Random;

/**
 * you should change this class for TASK 2
 */
public class BotDealer extends Participant {

	private List<Participant> players;

	public BotDealer(String name, List<Participant> players) {
		super(name);
		// ADDHERE
	}

	@Override
	public Action decideAction() {
		// TODO
		return new Random().nextBoolean() ? Action.HIT : Action.HOLD; // FIXME

	}

	@Override
	/**
	 * do not touch this method
	 */
	public int makeABet() {
		// the Dealer doesn't bet so is always zero
		return 0;
	}
}
"""
Here is the class that BotPlayer extends:
"""
package nz.ac.auckland.softeng281.a2;

import java.util.ArrayList;
import java.util.List;

/**
 * you cannot modify existing methods
 * but you can add new methods/fields
 */
public abstract class Participant {

    enum Action {
        HIT, HOLD
    }

    private String name;
    private List<Hand> hands;


    public Participant(String name) {
        this.name = name;
        hands = new ArrayList<>();
    }

    public List<Hand> getHands() {
        return hands;
    }


    public Hand getCurrentHand() {
        if (hands.isEmpty()) {
            throw new RuntimeException("You should't call this method if there are no hands");
        }

        return hands.get(hands.size() - 1);
    }

    public String getName() {
        return name;
    }


    public Hand createNewHand(int bet) {
        Hand newHand = new Hand(bet);
        hands.add(newHand);
        return newHand;
    }

    /**
     * do not change this method
     *
     * @param deck
     */
    public void play(Deck deck) {
        System.out.println("==================");
        System.out.println(name + " is playing");
        int bet = makeABet();
        Hand hand = createNewHand(bet);
        hand.addCard(deck.draw());
        hand.addCard(deck.draw());
        System.out.println("the initial two cards are");
        hand.print();
        System.out.println(name + "'s score is: " + hand.getScore());
        if (hand.countAces() > 0 && this instanceof HumanPlayer) {
            System.out.println("Remember that an ACE can have rank either 1 or 11");
        }
        Participant.Action decision = decideAction();
        while (decision == Participant.Action.HIT) {
            hand.addCard(deck.draw());
            hand.print();
            System.out.println(name + "'s score is: " + hand.getScore());
            if (hand.is21() || hand.isBust()) {
                break;
            }
            decision = decideAction();
        }
        pressEnterKeyToContinue();
    }

    private void pressEnterKeyToContinue() {
        System.out.println("Press Enter key to continue...");
        Utils.scanner.nextLine();
    }

    abstract Action decideAction();

    abstract int makeABet();
}
"""
Here are the tests this class needs to pass:
"""
public static class Task2Test {

        Participant dealer;
        List<Participant> players;

        ByteArrayOutputStream myOut;
        PrintStream origOut;

        @Before
        public void setUp() {
            players = new ArrayList<>();
            players.add(new BotPlayer("Bot1"));
            players.add(new BotPlayer("Bot2"));
            players.add(new BotPlayer("Bot3"));
            dealer = new BotDealer("Dealer", players);
            origOut = System.out;
            myOut = new ByteArrayOutputStream();
            System.setOut(new PrintStream(myOut));
        }

        @After
        public void tearDown() {
            System.setOut(origOut);
            if (myOut.toString().length() > 1) {
                System.out.println(System.lineSeparator() + "the System.out.print was :" + System.lineSeparator()
                        + myOut.toString());
            }
        }

        @Test
        public void testDealerCreated() {
            BlackJack game = new BlackJack();
            assertNotNull("The field dealer in the BlackJack class should not be null", game.getDealer());
            Utils.scanner = new Scanner("" + "5 hold " + System.getProperty("line.separator") + " "
                    + System.getProperty("line.separator") + " " + System.getProperty("line.separator") + " "
                    + System.getProperty("line.separator") + " " + "no");
            game.start();
            assertNotNull("The field dealer in the BlackJack class should not be null", game.getDealer());
            // check again if Bots are fine
            assertTrue("the first player should be human", game.getPlayers().get(0) instanceof HumanPlayer);
            assertTrue("the second player should be a bot", game.getPlayers().get(1) instanceof BotPlayer);
            assertTrue("the third player should be a bot", game.getPlayers().get(2) instanceof BotPlayer);
            assertTrue("I cannot find = \"Dealer's score is:\" did you name the Dealer correctly and did they play? ",
                    myOut.toString().contains("Dealer's score is: "));
        }

        @Test
        public void testDealerHoldWinningAll() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.ACE, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HIT)) {
                    fail("the dealer is winning all three players it should not HIT");
                }
            }
        }

        @Test
        public void testDealerHoldWinningAllBusted() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS), new Card(Card.Rank.TEN, Card.Suit.HEARTS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS), new Card(Card.Rank.TEN, Card.Suit.HEARTS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS), new Card(Card.Rank.TEN, Card.Suit.HEARTS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.THREE, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HIT)) {
                    fail("the dealer is winning all three players it should not HIT");
                }
            }
        }

        @Test
        public void testDealerHoldWinningAllSomeBusted() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS), new Card(Card.Rank.TEN, Card.Suit.HEARTS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS), new Card(Card.Rank.TEN, Card.Suit.HEARTS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.KING, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HIT)) {
                    fail("the dealer is winning all three players it should not HIT");
                }
            }
        }

        @Test
        public void testDealerHitLoosingAll() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.TWO, Card.Suit.CLUBS),
                    new Card(Card.Rank.TWO, Card.Suit.DIAMONDS), new Card(Card.Rank.TEN, Card.Suit.CLUBS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HOLD)) {
                    fail("the dealer is loosing with all 3 players why decided to HOLD?");
                }
            }
        }

        @Test
        public void testDealerHitLoosingAllDealerBusted() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.TWO, Card.Suit.CLUBS),
                    new Card(Card.Rank.TWO, Card.Suit.DIAMONDS), new Card(Card.Rank.TEN, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.HEARTS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HOLD)) {
                    fail("the dealer is loosing with all 3 players why decided to HOLD?");
                }
            }
        }

        @Test
        public void testDealerHoldWinningTwo() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.THREE, Card.Suit.CLUBS),
                    new Card(Card.Rank.TWO, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.ACE, Card.Suit.CLUBS),
                    new Card(Card.Rank.NINE, Card.Suit.CLUBS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HIT)) {
                    fail("the dealer is winning 2 out of 3 players it should not HIT");
                }
            }
        }

        @Test
        public void testDealerHitLoosingTwo() {
            HandFactory.addHand(players.get(0), 10, new Card(Card.Rank.THREE, Card.Suit.CLUBS),
                    new Card(Card.Rank.THREE, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(1), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(players.get(2), 10, new Card(Card.Rank.EIGHT, Card.Suit.CLUBS),
                    new Card(Card.Rank.TEN, Card.Suit.CLUBS));
            HandFactory.addHand(dealer, 10, new Card(Card.Rank.TWO, Card.Suit.CLUBS),
                    new Card(Card.Rank.TWO, Card.Suit.DIAMONDS), new Card(Card.Rank.TEN, Card.Suit.CLUBS));

            for (int i = 0; i <= 100; i++) {
                if (dealer.decideAction().equals(Participant.Action.HOLD)) {
                    fail("the dealer is loosing with 2 out of 3 players it should not HOLD");
                }
            }
        }

    }
"""