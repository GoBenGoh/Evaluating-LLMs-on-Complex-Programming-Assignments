{  "id": "chatcmpl-7oqYdhqtZZzNufUVuhKCJUxYuk3Kw",  "object": "chat.completion",  "created": 1692352787,  "model": "gpt-3.5-turbo-16k-0613",  "choices": [    {      "index": 0,      "message": {        "role": "assistant",        "content": "package nz.ac.auckland.se281;\r\n\r\nimport nz.ac.auckland.se281.Main.PolicyType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class InsuranceSystem {\r\n    private List<ClientProfile> database;\r\n\r\n    public InsuranceSystem() {\r\n        database = new ArrayList<>();\r\n    }\r\n\r\n    public void printDatabase() {\r\n        if (database.isEmpty()) {\r\n            System.out.println(\"Database has 0 profiles.\");\r\n        } else if (database.size() == 1) {\r\n            System.out.println(\"Database has 1 profile:\");\r\n            System.out.println(\" 1: \" + database.get(0).toString());\r\n        } else {\r\n            System.out.println(\"Database has \" + database.size() + \" profiles:\");\r\n            for (int i = 0; i < database.size(); i++) {\r\n                System.out.println(\" \" + (i + 1) + \": \" + database.get(i).toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void createNewProfile(String userName, String age) {\r\n        if (!isValidUsername(userName)) {\r\n            System.out.println(\"'\" + userName + \"' is an invalid username, it should be at least 3 characters long. No profile was created.\");\r\n            return;\r\n        }\r\n\r\n        if (!isUniqueUsername(userName)) {\r\n            System.out.println(\"Usernames must be unique. No profile was created for '\" + userName + \"'.\");\r\n            return;\r\n        }\r\n\r\n        int parsedAge;\r\n        try {\r\n            parsedAge = Integer.parseInt(age);\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"'\" + age + \"' is an invalid age, please provide a positive whole number only. No profile was created for \" + userName + \".\");\r\n            return;\r\n        }\r\n\r\n        if (parsedAge <= 0) {\r\n            System.out.println(\"'\" + age + \"' is an invalid age, please provide a positive whole number only. No profile was created for \" + userName + \".\");\r\n            return;\r\n        }\r\n\r\n        database.add(new ClientProfile(userName, parsedAge));\r\n        System.out.println(\"New profile created for \" + toTitleCase(userName) + \" with age \" + parsedAge + \".\");\r\n    }\r\n\r\n    public void loadProfile(String userName) {\r\n        if (isProfileLoaded()) {\r\n            System.out.println(\"Cannot load a new profile. First unload the profile for \" + loadedProfile.getUserName() + \".\");\r\n            return;\r\n        }\r\n\r\n        ClientProfile profile = findProfile(userName);\r\n        if (profile == null) {\r\n            System.out.println(\"No profile found for \" + userName + \". Profile not loaded.\");\r\n            return;\r\n        }\r\n\r\n        loadedProfile = profile;\r\n        System.out.println(\"Profile loaded for \" + loadedProfile.getUserName() + \".\");\r\n    }\r\n\r\n    public void unloadProfile() {\r\n        if (!isProfileLoaded()) {\r\n            System.out.println(\"No profile is currently loaded.\");\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"Profile unloaded for \" + loadedProfile.getUserName() + \".\");\r\n        loadedProfile = null;\r\n    }\r\n\r\n    public void deleteProfile(String userName) {\r\n        if (isProfileLoaded() && loadedProfile.getUserName().equals(userName)) {\r\n            System.out.println(\"Cannot delete profile for \" + userName + \" while loaded. No profile was deleted.\");\r\n            return;\r\n        }\r\n\r\n        boolean removed = database.removeIf(profile -> profile.getUserName().equals(userName));\r\n\r\n        if (removed) {\r\n            System.out.println(\"Profile deleted for \" + userName + \".\");\r\n        } else {\r\n            System.out.println(\"No profile found for \" + userName + \". No profile was deleted.\");\r\n        }\r\n    }\r\n\r\n    public void createPolicy(PolicyType type, String[] options) {\r\n        if (!isProfileLoaded()) {\r\n            System.out.println(\"Need to load a profile in order to create a policy.\");\r\n            return;\r\n        }\r\n\r\n        switch (type) {\r\n            case HOME:\r\n                createHomePolicy(options);\r\n                break;\r\n            case CAR:\r\n                createCarPolicy(options);\r\n                break;\r\n            case LIFE:\r\n                createLifePolicy(options);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private boolean isValidUsername(String username) {\r\n        return username.length() >= 3;\r\n    }\r\n\r\n    private boolean isUniqueUsername(String username) {\r\n        for (ClientProfile profile : database) {\r\n            if (profile.getUserName().equalsIgnoreCase(username)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private String toTitleCase(String word) {\r\n        String[] words = word.split(\" \");\r\n        StringBuilder result = new StringBuilder();\r\n        for (String w : words) {\r\n            result.append(Character.toUpperCase(w.charAt(0))).append(w.substring(1).toLowerCase()).append(\" \");\r\n        }\r\n        return result.toString().trim();\r\n    }\r\n\r\n    private ClientProfile findProfile(String username) {\r\n        for (ClientProfile profile : database) {\r\n            if (profile.getUserName().equalsIgnoreCase(username)) {\r\n                return profile;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private boolean isProfileLoaded() {\r\n        return loadedProfile != null;\r\n    }\r\n\r\n    private void createHomePolicy(String[] options) {\r\n        // TODO: Implement this method\r\n    }\r\n\r\n    private void createCarPolicy(String[] options) {\r\n        // TODO: Implement this method\r\n    }\r\n\r\n    private void createLifePolicy(String[] options) {\r\n        // TODO: Implement this method\r\n    }\r\n}"      },      "finish_reason": "stop"    }  ],  "usage": {    "prompt_tokens": 7157,    "completion_tokens": 1062,    "total_tokens": 8219  }}
