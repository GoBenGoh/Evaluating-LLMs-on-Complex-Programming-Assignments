{  "id": "chatcmpl-7ah00tlbTGrThHg3ytxx7SN0xb9ph",  "object": "chat.completion",  "created": 1688979452,  "model": "gpt-3.5-turbo-16k-0613",  "choices": [    {      "index": 0,      "message": {        "role": "assistant",        "content": "package nz.ac.auckland.se281;\r\n\r\nimport nz.ac.auckland.se281.Main.Command;\r\nimport nz.ac.auckland.se281.Main.PolicyType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class InsuranceSystem {\r\n  private final Map<String, Profile> database;\r\n  private Profile loadedProfile;\r\n\r\n  public InsuranceSystem() {\r\n    this.database = new HashMap<>();\r\n    this.loadedProfile = null;\r\n  }\r\n\r\n  public void printDatabase() {\r\n    // Check if the database is empty\r\n    if (database.isEmpty()) {\r\n      System.out.println(\"Database has 0 profiles.\");\r\n    } else {\r\n      int count = database.size();\r\n      String profileText = count == 1 ? \"profile\" : \"profiles\";\r\n\r\n      System.out.println(MessageCli.PRINT_DB_POLICY_COUNT.getMessage(\r\n          String.valueOf(count), profileText, getMessageSuffix(count)));\r\n\r\n      // Print each profile in the database\r\n      int rank = 1;\r\n      for (Profile profile : database.values()) {\r\n        System.out.println(profile.printData(rank));\r\n        rank++;\r\n      }\r\n    }\r\n  }\r\n\r\n  public void createNewProfile(String userName, String age) {\r\n    // Check if the username is unique\r\n    if (database.containsKey(userName)) {\r\n      System.out.println(MessageCli.INVALID_USERNAME_NOT_UNIQUE.getMessage(userName));\r\n      return;\r\n    }\r\n\r\n    // Check if the username is at least 3 characters long\r\n    if (userName.length() < 3) {\r\n      System.out.println(MessageCli.INVALID_USERNAME_TOO_SHORT.getMessage(userName));\r\n      return;\r\n    }\r\n\r\n    // Check if the age is a positive integer\r\n    try {\r\n      int ageInt = Integer.parseInt(age);\r\n      if (ageInt <= 0) {\r\n        throw new NumberFormatException();\r\n      }\r\n    } catch (NumberFormatException e) {\r\n      System.out.println(MessageCli.INVALID_AGE.getMessage(age, userName));\r\n      return;\r\n    }\r\n\r\n    // Create the new profile\r\n    Profile profile = new Profile(userName, age);\r\n\r\n    // Add the profile to the database\r\n    database.put(userName, profile);\r\n\r\n    System.out.println(MessageCli.PROFILE_CREATED.getMessage(userName, age));\r\n  }\r\n\r\n  public void loadProfile(String userName) {\r\n    // Check if a profile is already loaded\r\n    if (loadedProfile != null) {\r\n      System.out.println(MessageCli.CANNOT_CREATE_WHILE_LOADED.getMessage(userName));\r\n      return;\r\n    }\r\n\r\n    // Check if the profile exists in the database\r\n    if (!database.containsKey(userName)) {\r\n      System.out.println(MessageCli.NO_PROFILE_FOUND_TO_LOAD.getMessage(userName));\r\n      return;\r\n    }\r\n\r\n    // Load the profile\r\n    loadedProfile = database.get(userName);\r\n\r\n    System.out.println(MessageCli.PROFILE_LOADED.getMessage(userName));\r\n  }\r\n\r\n  public void unloadProfile() {\r\n    // Check if a profile is loaded\r\n    if (loadedProfile == null) {\r\n      System.out.println(MessageCli.NO_PROFILE_LOADED);\r\n      return;\r\n    }\r\n\r\n    // Unload the profile\r\n    loadedProfile = null;\r\n\r\n    System.out.println(MessageCli.PROFILE_UNLOADED.getMessage(loadedProfile.username));\r\n  }\r\n\r\n  public void deleteProfile(String userName) {\r\n    // Check if a profile is loaded\r\n    if (loadedProfile != null && loadedProfile.username.equals(userName)) {\r\n      System.out.println(MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.getMessage(userName));\r\n      return;\r\n    }\r\n\r\n    // Check if the profile exists in the database\r\n    if (!database.containsKey(userName)) {\r\n      System.out.println(MessageCli.NO_PROFILE_FOUND_TO_DELETE.getMessage(userName));\r\n      return;\r\n    }\r\n\r\n    // Delete the profile from the database\r\n    database.remove(userName);\r\n\r\n    System.out.println(MessageCli.PROFILE_DELETED.getMessage(userName));\r\n  }\r\n\r\n  public void createPolicy(PolicyType type, String[] options) {\r\n    // Check if a profile is loaded\r\n    if (loadedProfile == null) {\r\n      System.out.println(MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY);\r\n      return;\r\n    }\r\n\r\n    // Check if the profile already has a life policy\r\n    if (type == PolicyType.LIFE && loadedProfile.hasLifePolicy()) {\r\n      System.out.println(MessageCli.ALREADY_HAS_LIFE_POLICY.getMessage(loadedProfile.username));\r\n      return;\r\n    }\r\n\r\n    // Check if the profile is over the age limit for life policy\r\n    if (type == PolicyType.LIFE && loadedProfile.age > loadedProfile.getLifeLimit()) {\r\n      System.out.println(MessageCli.OVER_AGE_LIMIT_LIFE_POLICY.getMessage(loadedProfile.username));\r\n      return;\r\n    }\r\n\r\n    // Create the policy\r\n    Policy policy = new Policy(type, options);\r\n\r\n    // Add the policy to the profile\r\n    loadedProfile.addPolicy(policy);\r\n\r\n    System.out.println(MessageCli.NEW_POLICY_CREATED.getMessage(policy.getType(), loadedProfile.username));\r\n  }\r\n\r\n  private static class Profile {\r\n    private static int nextRank = 1;\r\n    private final String username;\r\n    private final int age;\r\n    private final int rank;\r\n    private final List<Policy> policies;\r\n\r\n    public Profile(String username, String age) {\r\n      this.username = convertToTitleCase(username);\r\n      this.age = Integer.parseInt(age);\r\n      this.rank = nextRank++;\r\n      this.policies = new ArrayList<>();\r\n    }\r\n\r\n    public String getUsername() {\r\n      return username;\r\n    }\r\n\r\n    public int getAge() {\r\n      return age;\r\n    }\r\n\r\n    public int getLifeLimit() {\r\n      return 70;\r\n    }\r\n\r\n    public void addPolicy(Policy policy) {\r\n      policies.add(policy);\r\n    }\r\n\r\n    public boolean hasLifePolicy() {\r\n      for (Policy policy : policies) {\r\n        if (policy.getType() == PolicyType.LIFE) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    public String printData(int rank) {\r\n      String profileData =\r\n          MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.getMessage(Integer.toString(rank), username, Integer.toString(age));\r\n\r\n      for (int i = 0; i < policies.size(); i++) {\r\n        Policy policy = policies.get(i);\r\n        profileData +=\r\n            \"\\n\\t\" + policy.getDetails() + \"(\" + policy.getType().name() + \")\";\r\n      }\r\n      return profileData;\r\n    }\r\n\r\n    private String convertToTitleCase(String str) {\r\n      String[] words = str.toLowerCase().split(\" \");\r\n      StringBuilder sb = new StringBuilder();\r\n      for (String word : words) {\r\n        sb.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1)).append(\" \");\r\n      }\r\n      return sb.toString().trim();\r\n    }\r\n  }\r\n\r\n  private static class Policy {\r\n    private final PolicyType type;\r\n    private final Map<String, String> details;\r\n\r\n    public Policy(PolicyType type, String[] options) {\r\n      this.type = type;\r\n      this.details = new HashMap<>();\r\n      for (int i = 0; i < options.length; i++) {\r\n        details.put(MessageCli.PRINT_DB_POLICY_HOME.getOptionPrompt(i), options[i]);\r\n      }\r\n    }\r\n\r\n    public PolicyType getType() {\r\n      return type;\r\n    }\r\n\r\n    public Map<String, String> getDetails() {\r\n      return details;\r\n    }\r\n  }\r\n\r\n  private String getMessageSuffix(int count) {\r\n    if (count == 0) {\r\n      return \"\";\r\n    }\r\n\r\n    return count == 1 ? \":\" : \"s:\";\r\n  }\r\n}"      },      "finish_reason": "stop"    }  ],  "usage": {    "prompt_tokens": 7011,    "completion_tokens": 1466,    "total_tokens": 8477  }}
