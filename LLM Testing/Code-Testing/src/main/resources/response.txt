{  "id": "chatcmpl-7iBV9jeDxiHfbQL9zadM4ZFKfiSvX",  "object": "chat.completion",  "created": 1690764999,  "model": "gpt-3.5-turbo-16k-0613",  "choices": [    {      "index": 0,      "message": {        "role": "assistant",        "content": "```\r\nimport nz.ac.auckland.se281.Main.PolicyType;\r\n\r\nimport java.util.*;\r\n\r\npublic class InsuranceSystem {\r\n    private final List<Profile> profiles;\r\n    private Profile loadedProfile;\r\n\r\n    public InsuranceSystem() {\r\n        this.profiles = new ArrayList<>();\r\n        this.loadedProfile = null;\r\n    }\r\n    public void printDatabase (){\r\n        String summaryHeader = \"Database has \"+profiles.size()+\" profile\";\r\n\r\n        if(profiles.size()>1){\r\n            summaryHeader += \"s:\";\r\n        }else if (profiles.size()==1){\r\n           summaryHeader += \":\";\r\n        }else {\r\n            System.out.println(summaryHeader + \"s\");\r\n            return;\r\n        }\r\n\r\n        System.out.println();\r\n        System.out.println(summaryHeader);\r\n        \r\n        int rank = 1;\r\n\r\n        for (Profile profile:profiles){\r\n            System.out.println(\" \"+(rank++)+\": \"+profile.getUsername()+\", \"+profile.getAge());\r\n        }\r\n    }\r\n\r\n    public void createNewProfile(String userName, String age) {\r\n\r\n        int userID= 0;\r\n        for (Profile profile:profiles)\r\n        {\r\n            String lowerCaseProfileUserName = profile.getUsername().toLowerCase();\r\n            if (lowerCaseProfileUserName.equals(userName.toLowerCase())){\r\n                System.out.println(\"Usernames must be unique. No profile was created for '\" + profile.getUsername() +\"'.\")\r\n                return:   \r\n            }\r\n            userID++;\r\n        }\r\n\r\n        if (!isUnique(userName) && !isValidName(userName)){\r\n            System.out.println(\"Invalid User Name\")\r\n             System.out.println(\"No profile was created.\");  \r\n             return;\r\n        }else if (!isValidUserNameName(userName)) {\r\n              System.out.println(\"username was not valied please ensure username meet the required lenght of 3.\")\r\n              System.out.println(\"No profile was created.\");  \r\n              return;\r\n        } \r\n           else if (isValidAge(age)) {\r\n              int profileAge = Integer.ParseInt(age);\r\n              System.out.println(\"Profile Created\");  \r\n              return;\r\n        } else {\r\n            System.out.println(\"No profile was created for ' \"+ userName +\" '\");// error message 2\r\n             return;\r\n        }\r\n\r\n        public void loadProfile(String userName) {\r\n            this.unloadProfile();\r\n\r\n            int profileId = findByUserName(userName);\r\n            \r\n            if (!isUnique(userName)){\r\n               System.out.println(\"Already has a life policy\");\r\n                return ;\r\n            }\r\n            Profile profileObject = this.profiles.get(profileId);// Loop through and load profiles.\r\n\r\n            if (isValidUseryName(username)) {// remove sp\r\n                this.loadedProfile = profileObject;// pass current profile to loadedProfile\r\n                 System.out.println(\"Profile loaded. .\" +username);//message line 1\r\n            } else {\r\n                ErrorTypeProfile(21,username);// Concat ' and username, concets and comma, \r\n                return;//If the command had multiple errors juse return else print the appropriate message.\r\n            }\r\n        }\r\n\r\n        public void unloadProfile(){\r\n            this.loadedProfile = null;\r\n        }\r\n\r\n\r\n        public void deleteProfile(String userName) {\r\n            //  this.loadProfile(); Implement the further logic ie to load the profile first .\r\n            int userId = this.findByUserName(userName)\r\n            Profile profileObject = this.profiles.get(userId);\r\n            \r\n            if (isUnique(username)) {// \r\n               //\r\n              System.out.println(\"invalid username\");//However if no valid username pass in the storedProfilesList.Print erreason\r\n              return;\r\n            } else if (profileObject == this.loadedProfile){\r\n              System.out.println(\"Cannot delete profile for ' \" + username + \" ' while profile is already loaded.ToString?\");//Some of the constructs might be added too.\r\n              return;\r\n            }\r\n\r\n            // However You can choose to omit the square brackets\r\n            this.profiles.remove(profileId);\r\n            System.out.println(MessageCli.PROFILE_DELETED.getMessage(profile.getusername()));\r\n\r\n        }\r\n\r\n        public void createPolicy(PolicyType type, String[] options) {\r\n  \r\n            // You maight consider that this should be passed then.\r\n\r\n            Profile loadedProfile = this.loadedProfile;// This is if any special checking required on loadedProfile but any action called then we can assume that this profile was loaded already .\r\n            String username= loadedProfile.getUsername()\r\n\r\n            switch (type) {\r\n                case home:\r\n\r\n                    if (loadedProfile.getNoOfHOMEPolicies ()==0) {//This is were you verify You want to check existing policies belong to this user other than Homepolicy.....\r\n\r\n                        if(options.length != 2 || options[0].isEmpty() || options[1].isEmpty()) {\r\n                            System.out.println(MessageCli.WRONG_ARGUMENT_COUNT.getMessage(\"2\", \"\", POLICY_HOME) )\r\n                            return;\r\n                        }\r\n                         \r\n                        String sumToInsure = options[0];\r\n                        \r\n                        if (!numbercheck) {\r\n                            System.out.println(\"sum to Insure provided must be of positive integer. Provided value expects \" + sumToInsure);// is not a pure digit print message where it says must be a postive ONE AFTER a prompt.\r\n                            return;\r\n                        }\r\n\r\n                        \r\n                         \r\n                        //ERROR second case: Duplicate CarPolicy.\r\n                      // Third Short message could : Multiple policy discount(Each time new policy created Check how many policies where 1.Multiple i.e 20% 2.ASecond Case: 2 policies currntly 10%discount(Two policies currently instnatiate)\r\n\r\n\r\n                       \r\n                       System.out.println(\"Type : CarPolicy , SumToInsure :\"+ sumToInsure); \r\n                       this.loadedProfile.incrementNoOfHOMEPolicies();// update getCarPolicies with policycounter as well.\r\n                       return ;\r\n\r\n                    } else {\r\n\r\n                      System.out.println(MessageCli.ALREADY_HAS_HOME_POLICY.getMessage(username))//\r\n                    }\r\n                    break;\r\n                case Car:\r\n                    if (loadedProfile.getNoOfCARPOlicies () == 0) {//Second Case: Duplicate CarPolicy....Just create an error First we do that then.The prompt now should actually contrain Make.....or The selection does not have CarPolicy duplicates allowed, Try Again.\r\n\r\n                        if(options.length != 3 || options[0].isEmpty() || options[1].isEmpty()|| options[2].isEmpty()) {\r\n                            System.out.println(MessageCli.WRONG_ARGUMENT_COUNT.getMessage(\"3\", \"\", POLICY_CAR) )//\r\n                            return;\r\n                        }\r\n\r\n                      \r\n                        \r\n                      //boolean check = ...(Sum Value) .....Calculate the SumIntegerNumber and then check the number....catch check and print the value exptects .\r\n                      \r\n                     \r\n                      \r\n                      \r\n                      //\r\n                      \r\n                       //....\r\n                       \r\n                       // this.timeoutDT= System.currentTimeMillis()\r\n\r\n                      this.loadedProfile.incrementNoOfCARPolicies();// Now we need to get and assign the data above to the procedure parameters\r\n                      System.out.println(\"Type : CarPolicy , SumToInsure :\"+ sumToInsure); \r\n                        \r\n\r\n\r\n                            /* ERROR second case: Duplicate CarPolicy.\r\n                            Third Short message could : Multiple policy discount(Each time new policy created Check how many policies where 1.Multiple i.e 20% 2.ASecond Case: 2 policies currntly 10%discount(Two policies currently instnatiate) */\r\n                      \r\n                        \r\n                        // Array.push  to policys select all the type, objects as the....like Home:SumIsuored,Premium \r\n                      System.out.println(loadedProfile+MessageCli.NEW_POLICY_CREATED.getMessage(type,username) )//\r\n\r\n                     } else {\r\n\r\n                    System.out.println(MessageCli.ALREADY_HAS_car(i.e POLICY.getMessage.upperc(locale))+ username)//\r\n                      \r\n                    }\r\n\r\n                        break;\r\n                case life:\r\n                    //...\r\n                    System.out.println(username+ MessageCli.LIFE_POLICY_CREATED.getMessage + options))//\r\n                    break;\r\n                default:\r\n                    throw new IllegalArgumentException(\"Invalid policy type\");\r\n            }\r\n        }\r\n\r\n        private boolean isUnique(String userName) {\r\n\r\n            for(Profile profile:profiles){\r\n                if(profile.getUserName().equalsIgnoreCase(userName)){\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        \r\n        // Correct the checking grammer methodNameIsUniqeUserName \r\n        // For alphabet titleCaseing firstNameString and secondNameString is more appropriate where username might rep the third postion. .\r\n        //\r\n        private boolean isValidName(String userName) {\r\n \t\t\t\t  // Returns true if the string contains nothing i.e if blank or empty. Strings can't be empty like userName\r\n                    if (username.isEmpty() && (!firstNameString.isEmpty() && secondNameString.isEmpty())) { \r\n                        return false;\r\n                    }\r\n            return true;\r\n        }\r\n\r\n\t\tprivate boolean isValidAge(String age)\r\n\t\t{\r\n            int ageint = -1;\r\n             try{\r\n                    ageint  = parseAge(age);\r\n                      if (ageint < 0) \r\n                      return false;\r\n                 }\r\n                 catch (NumberFormatException ex){\r\n                       return false;\r\n\r\n                    }\r\n                        //\r\n                       \r\n                        return true;\r\n\r\n        }\r\n        \r\n\r\n  private static int checkIsAllDigit(String arr[])\r\n  {\r\n\r\n             for (int i = 0; i < str.length(); i++) {\r\n                 char ch = str.charAt(i);\r\n  \r\n                // check character is digit or not\r\n               if (Character.isDigit(ch) == false)\r\n                   return false;\r\n            }\r\n  \r\n            return true;\r\n }\r\n\r\n   private static int int parseAge(String age){\r\n   \t \r\n             if (checkIsAllDigit(age)){\r\n                System.out.println(age);       \r\n                }\r\n                  else{\r\n                   return -1\r\n           \t\t\t }//   return has been placed here not below age, and initial = -1.\r\n\r\n          \treturn Integer.parseInt(age);\r\n }\r\n\r\n   public static void main(String[] args){\r\n          // Start point actual point where generatedoutput should print values on output.\r\n\r\n   \t       InsuranceSystem genrate = new InsuranceSystem();\r\n\r\n           genrate.createNewProfile(\"csdctrkfjl\",\"Defalt\");\r\n\r\n           genrate.loadProfile(\"jhgfg\");\r\n           genrate.loadProfile(\"jh\")\r\n           genrate.loadProfile(\"WIE\")\r\n\r\n\r\n\t\t   genrate.printDatabase();\r\n           \r\n         //  genrate.totalImpFulfil();\r\n\r\n    }\r\n}"      },      "finish_reason": "stop"    }  ],  "usage": {    "prompt_tokens": 6796,    "completion_tokens": 2013,    "total_tokens": 8809  }}
