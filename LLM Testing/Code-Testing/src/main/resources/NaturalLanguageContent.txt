package nz.ac.auckland.se281;

import nz.ac.auckland.se281.Main.PolicyType;

import java.util.ArrayList;
import java.util.List;

public class InsuranceSystem {
    private List<ClientProfile> database;

    public InsuranceSystem() {
        database = new ArrayList<>();
    }

    public void printDatabase() {
        if (database.isEmpty()) {
            System.out.println("Database has 0 profiles.");
        } else if (database.size() == 1) {
            System.out.println("Database has 1 profile:");
            System.out.println(" 1: " + database.get(0).toString());
        } else {
            System.out.println("Database has " + database.size() + " profiles:");
            for (int i = 0; i < database.size(); i++) {
                System.out.println(" " + (i + 1) + ": " + database.get(i).toString());
            }
        }
    }

    public void createNewProfile(String userName, String age) {
        if (!isValidUsername(userName)) {
            System.out.println("'" + userName + "' is an invalid username, it should be at least 3 characters long. No profile was created.");
            return;
        }

        if (!isUniqueUsername(userName)) {
            System.out.println("Usernames must be unique. No profile was created for '" + userName + "'.");
            return;
        }

        int parsedAge;
        try {
            parsedAge = Integer.parseInt(age);
        } catch (NumberFormatException e) {
            System.out.println("'" + age + "' is an invalid age, please provide a positive whole number only. No profile was created for " + userName + ".");
            return;
        }

        if (parsedAge <= 0) {
            System.out.println("'" + age + "' is an invalid age, please provide a positive whole number only. No profile was created for " + userName + ".");
            return;
        }

        database.add(new ClientProfile(userName, parsedAge));
        System.out.println("New profile created for " + toTitleCase(userName) + " with age " + parsedAge + ".");
    }

    public void loadProfile(String userName) {
        if (isProfileLoaded()) {
            System.out.println("Cannot load a new profile. First unload the profile for " + loadedProfile.getUserName() + ".");
            return;
        }

        ClientProfile profile = findProfile(userName);
        if (profile == null) {
            System.out.println("No profile found for " + userName + ". Profile not loaded.");
            return;
        }

        loadedProfile = profile;
        System.out.println("Profile loaded for " + loadedProfile.getUserName() + ".");
    }

    public void unloadProfile() {
        if (!isProfileLoaded()) {
            System.out.println("No profile is currently loaded.");
            return;
        }

        System.out.println("Profile unloaded for " + loadedProfile.getUserName() + ".");
        loadedProfile = null;
    }

    public void deleteProfile(String userName) {
        if (isProfileLoaded() && loadedProfile.getUserName().equals(userName)) {
            System.out.println("Cannot delete profile for " + userName + " while loaded. No profile was deleted.");
            return;
        }

        boolean removed = database.removeIf(profile -> profile.getUserName().equals(userName));

        if (removed) {
            System.out.println("Profile deleted for " + userName + ".");
        } else {
            System.out.println("No profile found for " + userName + ". No profile was deleted.");
        }
    }

    public void createPolicy(PolicyType type, String[] options) {
        if (!isProfileLoaded()) {
            System.out.println("Need to load a profile in order to create a policy.");
            return;
        }

        switch (type) {
            case HOME:
                createHomePolicy(options);
                break;
            case CAR:
                createCarPolicy(options);
                break;
            case LIFE:
                createLifePolicy(options);
                break;
        }
    }

    private boolean isValidUsername(String username) {
        return username.length() >= 3;
    }

    private boolean isUniqueUsername(String username) {
        for (ClientProfile profile : database) {
            if (profile.getUserName().equalsIgnoreCase(username)) {
                return false;
            }
        }
        return true;
    }

    private String toTitleCase(String word) {
        String[] words = word.split(" ");
        StringBuilder result = new StringBuilder();
        for (String w : words) {
            result.append(Character.toUpperCase(w.charAt(0))).append(w.substring(1).toLowerCase()).append(" ");
        }
        return result.toString().trim();
    }

    private ClientProfile findProfile(String username) {
        for (ClientProfile profile : database) {
            if (profile.getUserName().equalsIgnoreCase(username)) {
                return profile;
            }
        }
        return null;
    }

    private boolean isProfileLoaded() {
        return loadedProfile != null;
    }

    private void createHomePolicy(String[] options) {
        // TODO: Implement this method
    }

    private void createCarPolicy(String[] options) {
        // TODO: Implement this method
    }

    private void createLifePolicy(String[] options) {
        // TODO: Implement this method
    }
}
