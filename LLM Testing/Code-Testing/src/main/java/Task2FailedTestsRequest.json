{
  "model": "gpt-3.5-turbo-16k",
  "messages": [{"role": "user", "content":"The instructions for Task 2 are below marked between a pair of \"///\":\n///\nNow that the system supports creating profiles, it is time to manage those profiles. This will include loading, unloading, and deleting profiles as explained below.\n\nLoading Profiles\nThe LOAD_PROFILE command loads a profile into the system. This command requires exactly one argument, representing the username to be loaded. Again, the user might type the username in any case, but the system will always process it in title case.\n\nA success message occurs when the profile is found and successfully loaded:\n\nProfile loaded for <USERNAME>.\nIf the profile is not found, then the following message gets printed:\n\nNo profile found for <USERNAME>. Profile not loaded.\nWhen a profile is successfully loaded, the PRINT_DB command should print an extra *** in front of the currently-loaded profile. For example, if the database has three profiles, and the second profile is successfully loaded, then the PRINT_DB command should print the following:\n\nDatabase has 3 profiles:\n 1: Jordan, 21\n*** 2: Jenny, 25\n 3: John, 30\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_SHORT message template.\n\nWhile a profile is loaded, the LOAD_PROFILE command could be executed again. The new load will only succeed if the profile is found (as a usual load), otherwise it fails with the usual error when a username cannot be loaded. In this case, the currently-loaded profile remains loaded.\n\nIf the new load succeeds, the system will unload the currently-loaded profile, and load the new profile. For example, if the database has three profiles, and the second profile is successfully loaded, and then the third profile is successfully loaded, then the PRINT_DB command should print the following:\n\nDatabase has 3 profiles:\n 1: Jordan, 21\n 2: Jenny, 25\n*** 3: John, 30\nWhile a profile is loaded, the CREATE_PROFILE command should not be allowed. If the user tries to create a profile while a profile is already loaded, then the following message should be printed:\n\nCannot create a new profile. First unload the profile for <CURRENT_LOADED_PROFILE_USERNAME>.\nCreating a new profile can go ahead, only after the currently-loaded profile is unloaded (see below).\n\nUnloading Profiles\nThe UNLOAD_PROFILE command unloads the currently-loaded profile. This command requires no arguments.\n\nWhen a profile is successfully unloaded, the following message should be printed:\n\nProfile unloaded for <USERNAME>.\nIf there is no currently-loaded profile, then the following message should be printed:\n\nNo profile is currently loaded.\n\nDeleting Profiles\nThe DELETE_PROFILE command deletes a profile from the database. This command requires exactly one argument, representing the username to be deleted.\n\nWhen a profile is successfully deleted, the following message should be printed:\n\nProfile deleted for <USERNAME>.\nWhen a profile is successfully deleted, this means it will no longer exist in the database.\n\nIf the profile is not found, then the following message gets printed:\n\nNo profile found for <USERNAME>. No profile was deleted.\nIf the profile is currently loaded, then the deletion should not go ahead and the following message gets printed:\n\nCannot delete profile for <USERNAME> while loaded. No profile was deleted.\nThe loaded profile must be unloaded before it can be deleted.\n\nIt is however perfectly fine to delete a profile that is not currently loaded, as long as it exists in the database.\n///\nThe following section is the an existing Java class named MessageCli:\n```\npackage nz.ac.auckland.se281;\n\n/** You cannot modify this class! */\npublic enum MessageCli {\n  COMMAND_NOT_FOUND(\n      \"Error! Command not found! (run 'help' for the list of available commands): \\\"%s\\\"\"),\n  WRONG_ARGUMENT_COUNT(\n      \"Error! Incorrect number of arguments provided. Expected %s argument%s for the \\\"%s\\\"\"\n          + \" command\"),\n\n  PRINT_DB_POLICY_COUNT(\"Database has %s profile%s%s\"),\n  PRINT_DB_PROFILE_HEADER_MINIMAL(\" %s: %s, %s\"),\n  PRINT_DB_PROFILE_HEADER_SHORT(\" %s%s: %s, %s\"),\n  PRINT_DB_PROFILE_HEADER_MEDIUM(\" %s%s: %s, %s, %s polic%s\"),\n  PRINT_DB_PROFILE_HEADER_LONG(\" %s%s: %s, %s, %s polic%s for a total of $%s\"),\n\n  PRINT_DB_CAR_POLICY(\"\\tCar Policy (%s, Sum Insured: $%s, Premium: $%s -> $%s)\"),\n  PRINT_DB_HOME_POLICY(\"\\tHome Policy (%s, Sum Insured: $%s, Premium: $%s -> $%s)\"),\n  PRINT_DB_LIFE_POLICY(\"\\tLife Policy (Sum Insured: $%s, Premium: $%s -> $%s)\"),\n\n  INVALID_USERNAME_TOO_SHORT(\n      \"'%s' is an invalid username, it should be at least 3 characters long. No profile was\"\n          + \" created.\"),\n  INVALID_USERNAME_NOT_UNIQUE(\"Usernames must be unique. No profile was created for '%s'.\"),\n  INVALID_AGE(\n      \"'%s' is an invalid age, please provide a positive whole number only. No profile was created\"\n          + \" for %s.\"),\n\n  CANNOT_CREATE_WHILE_LOADED(\"Cannot create a new profile. First unload the profile for %s.\"),\n\n  PROFILE_CREATED(\"New profile created for %s with age %s.\"),\n  PROFILE_DELETED(\"Profile deleted for %s.\"),\n  PROFILE_LOADED(\"Profile loaded for %s.\"),\n  PROFILE_UNLOADED(\"Profile unloaded for %s.\"),\n\n  NO_PROFILE_FOUND_TO_LOAD(\"No profile found for %s. Profile not loaded.\"),\n  NO_PROFILE_FOUND_TO_DELETE(\"No profile found for %s. No profile was deleted.\"),\n  NO_PROFILE_FOUND_TO_CREATE_POLICY(\"Need to load a profile in order to create a policy.\"),\n\n  NO_PROFILE_LOADED(\"No profile is currently loaded.\"),\n  CANNOT_DELETE_PROFILE_WHILE_LOADED(\n      \"Cannot delete profile for %s while loaded. No profile was deleted.\"),\n\n  NEW_POLICY_CREATED(\"New %s policy created for %s.\"),\n  ALREADY_HAS_LIFE_POLICY(\"%s already has a life policy. No new policy was created.\"),\n  OVER_AGE_LIMIT_LIFE_POLICY(\"%s is over the age limit. No policy was created.\"),\n\n  DISCOUNT_TWO(\"Two policies are in place, client will get 10% discount\"),\n  DISCOUNT_MULTIPLE(\"Multiple policies are in place, client will get 20% discount\"),\n\n  END(\"You closed the terminal. Goodbye.\");\n\n  private final String msg;\n\n  private MessageCli(final String msg) {\n    this.msg = msg;\n  }\n\n  public String getMessage(final String... args) {\n    String tmpMessage = msg;\n\n    for (final String arg : args) {\n      tmpMessage = tmpMessage.replaceFirst(\"%s\", arg);\n    }\n\n    return tmpMessage;\n  }\n\n  public void printMessage(final String... args) {\n    System.out.println(getMessage(args));\n  }\n\n  @Override\n  public String toString() {\n    return msg;\n  }\n}\n```\nThe following section shows the Main Java class:\n```\npackage nz.ac.auckland.se281;\n\nimport java.util.Scanner;\n\n/** You cannot modify this class! */\npublic class Main {\n  public enum PolicyType {\n    HOME,\n    CAR,\n    LIFE,\n  }\n\n  public enum Command {\n    PRINT_DB(0, \"Print the entire insurance database\"),\n\n    CREATE_PROFILE(2, \"Create a new client profile <USERNAME> <AGE>\"),\n    LOAD_PROFILE(1, \"Load the specified profile <USERNAME>\"),\n    UNLOAD_PROFILE(0, \"Unload the currently-loaded profile\"),\n    DELETE_PROFILE(1, \"Delete the specified profile <USERNAME> from the database\"),\n\n    POLICY_HOME(\n        0,\n        \"Create a new home policy for the currently-loaded profile\",\n        \"Sum to insure\",\n        \"Property address\",\n        \"Rental? (y/n)\"),\n    POLICY_CAR(\n        0,\n        \"Create a new car policy for the currently-loaded profile\",\n        \"Sum to insure\",\n        \"Make and model\",\n        \"License plate\",\n        \"Mechanical warranty? (y/n)\"),\n    POLICY_LIFE(0, \"Create a new life policy for the currently-loaded profile\", \"Sum to insure\"),\n\n    HELP(0, \"Print usage\"),\n    EXIT(0, \"Exit the application\");\n\n    private final int numArgs;\n    private final String message;\n    private final String[] optionPrompts;\n\n    private Command(final int numArgs, final String message) {\n      this(numArgs, message, new String[] {});\n    }\n\n    private Command(final int numArgs, final String message, final String... optionPrompts) {\n      this.numArgs = numArgs;\n      this.message = message;\n      this.optionPrompts = optionPrompts;\n    }\n\n    public boolean hasArguments() {\n      return numArgs > 0;\n    }\n\n    public int getNumArgs() {\n      return numArgs;\n    }\n\n    public boolean hasOptions() {\n      return optionPrompts.length > 0;\n    }\n\n    public int getNumOptions() {\n      return optionPrompts.length;\n    }\n\n    public String getOptionPrompt(final int index) {\n      return optionPrompts[index];\n    }\n  }\n\n  private static final String COMMAND_PREFIX = \"insurance system> \";\n\n  public static void main(final String[] args) {\n    new Main(new Scanner(System.in), new InsuranceSystem()).start();\n  }\n\n  public static String help() {\n    final StringBuilder sb = new StringBuilder();\n\n    for (final Command command : Command.values()) {\n      sb.append(command).append(\"\\t\");\n\n      // Add extra padding to align the argument counts\n      // if the command name is less than the tab width.\n      if (command.toString().length() < 8) {\n        sb.append(\"\\t\");\n      }\n\n      if (command.numArgs > 0) {\n        sb.append(\"[\").append(command.numArgs).append(\" arguments]\");\n      } else {\n        sb.append(\"[no args]\");\n      }\n\n      sb.append(\"\\t\").append(command.message).append(System.lineSeparator());\n    }\n\n    return sb.toString();\n  }\n\n  private static void printBanner() {\n    // https://patorjk.com/software/taag/\n    // https://www.freeformatter.com/java-dotnet-escape.html#before-output\n\n    System.out.println(\n        \"\\r\\n\"\n            + \" $$$$$$\\\\   $$$$$$\\\\    $$\\\\         $$$$$$\\\\\\r\\n\"\n            + \"$$  __$$\\\\ $$  __$$\\\\ $$$$ |        \\\\_$$  _|\\r\\n\"\n            + \"\\\\__/  $$ |$$ /  $$ |\\\\_$$ |          $$ |  $$$$$$$\\\\   $$$$$$$\\\\ $$\\\\   $$\\\\ \"\n            + \" $$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\   $$$$$$$\\\\  $$$$$$\\\\\\r\\n\"\n            + \" $$$$$$  | $$$$$$  |  $$ |          $$ |  $$  __$$\\\\ $$  _____|$$ |  $$ |$$  __$$\\\\\"\n            + \" \\\\____$$\\\\ $$  __$$\\\\ $$  _____|$$  __$$\\\\\\r\\n\"\n            + \"$$  ____/ $$  __$$<   $$ |          $$ |  $$ |  $$ |\\\\$$$$$$\\\\  $$ |  $$ |$$ | \"\n            + \" \\\\__|$$$$$$$ |$$ |  $$ |$$ /      $$$$$$$$ |\\r\\n\"\n            + \"$$ |      $$ /  $$ |  $$ |          $$ |  $$ |  $$ | \\\\____$$\\\\ $$ |  $$ |$$ |    \"\n            + \" $$  __$$ |$$ |  $$ |$$ |      $$   ____|\\r\\n\"\n            + \"$$$$$$$$\\\\ \\\\$$$$$$  |$$$$$$\\\\       $$$$$$\\\\ $$ |  $$ |$$$$$$$  |\\\\$$$$$$  |$$ |   \"\n            + \"  \\\\$$$$$$$ |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$\\\\\\r\\n\"\n            + \"\\\\________| \\\\______/ \\\\______|      \\\\______|\\\\__|  \\\\__|\\\\_______/  \\\\______/\"\n            + \" \\\\__|      \\\\_______|\\\\__|  \\\\__| \\\\_______| \\\\_______|\\r\\n\");\n  }\n\n  private final Scanner scanner;\n\n  private final InsuranceSystem insuranceSystem;\n\n  public Main(final Scanner scanner, final InsuranceSystem insuranceSystem) {\n    this.scanner = scanner;\n    this.insuranceSystem = insuranceSystem;\n  }\n\n  public void start() {\n    printBanner();\n    System.out.println(help());\n\n    String command;\n\n    // Prompt and process commands until the exit command.\n    do {\n      System.out.print(COMMAND_PREFIX);\n      command = scanner.nextLine().trim();\n    } while (processCommand(command));\n  }\n\n  private boolean processCommand(String input) {\n    // Remove whitespace at the beginning and end of the input.\n    input = input.trim();\n\n    final String[] args = input.split(\" \");\n\n    // Allow any case, and dashes to be used instead of underscores.\n    final String commandStr = args[0].toUpperCase().replaceAll(\"-\", \"_\");\n\n    final Command command;\n\n    try {\n      // Command names correspond to the enum names.\n      command = Command.valueOf(commandStr);\n    } catch (final Exception e) {\n      MessageCli.COMMAND_NOT_FOUND.printMessage(commandStr);\n      return true;\n    }\n\n    if (!checkArgs(command, args)) {\n      MessageCli.WRONG_ARGUMENT_COUNT.printMessage(\n          String.valueOf(command.getNumArgs()), command.getNumArgs() > 1 ? \"s\" : \"\", commandStr);\n      return true;\n    }\n\n    switch (command) {\n      case CREATE_PROFILE:\n        insuranceSystem.createNewProfile(args[1], args[2]);\n        break;\n      case LOAD_PROFILE:\n        insuranceSystem.loadProfile(args[1]);\n        break;\n      case UNLOAD_PROFILE:\n        insuranceSystem.unloadProfile();\n        break;\n      case DELETE_PROFILE:\n        insuranceSystem.deleteProfile(args[1]);\n        break;\n      case PRINT_DB:\n        insuranceSystem.printDatabase();\n        break;\n      case POLICY_HOME:\n        insuranceSystem.createPolicy(PolicyType.HOME, processOptions(command));\n        break;\n      case POLICY_CAR:\n        insuranceSystem.createPolicy(PolicyType.CAR, processOptions(command));\n        break;\n      case POLICY_LIFE:\n        insuranceSystem.createPolicy(PolicyType.LIFE, processOptions(command));\n        break;\n      case EXIT:\n        MessageCli.END.printMessage();\n\n        // Signal that the program should exit.\n        return false;\n      case HELP:\n        System.out.println(help());\n        break;\n    }\n\n    // Signal that another command is expected.\n    return true;\n  }\n\n  private String[] processOptions(final Command command) {\n    final String[] options = new String[command.getNumOptions()];\n\n    for (int i = 0; i < command.getNumOptions(); i++) {\n      System.out.print(\"\\t\" + command.getOptionPrompt(i) + \": \");\n      options[i] = scanner.nextLine().trim();\n    }\n\n    return options;\n  }\n\n  private boolean checkArgs(final Command command, final String[] args) {\n    return command.getNumArgs() == args.length - 1;\n  }\n}\n```\nPlease fix the following code according to the instructions and the failing test cases:\n```\npackage nz.ac.auckland.se281;\n\nimport nz.ac.auckland.se281.Main.PolicyType;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class InsuranceSystem {\n  private List<ClientProfile> database;\n\n  public InsuranceSystem() {\n    database = new ArrayList<>();\n  }\n\n  public void printDatabase() {\n    if (database.isEmpty()) {\n      MessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"0\", \"s\", \".\");\n    } else if (database.size() == 1) {\n      MessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"1\", \"\", \":\");\n      printProfile(database.get(0), 1);\n    } else {\n      MessageCli.PRINT_DB_POLICY_COUNT.printMessage(String.valueOf(database.size()), \"s\", \":\");\n      for (int i = 0; i < database.size(); i++) {\n        printProfile(database.get(i), i + 1);\n      }\n    }\n  }\n\n  public void createNewProfile(String userName, String age) {\n    if (!isUsernameValid(userName)) {\n      MessageCli.INVALID_USERNAME_TOO_SHORT.printMessage(capitalizeFirstLetter(userName));\n    } else if (!isUsernameUnique(userName)) {\n      MessageCli.INVALID_USERNAME_NOT_UNIQUE.printMessage(capitalizeFirstLetter(userName));\n    } else if (!isAgeValid(age)) {\n      MessageCli.INVALID_AGE.printMessage(age, capitalizeFirstLetter(userName));\n    } else {\n      int parsedAge = Integer.parseInt(age);\n      ClientProfile newProfile = new ClientProfile(capitalizeFirstLetter(userName), parsedAge);\n      database.add(newProfile);\n      MessageCli.PROFILE_CREATED.printMessage(capitalizeFirstLetter(userName), age);\n    }\n  }\n\n  public void loadProfile(String userName) {\n    if (isProfileLoaded()) {\n      MessageCli.CANNOT_CREATE_WHILE_LOADED.printMessage(getLoadedProfile().getUsername());\n    } else {\n      ClientProfile profile = findProfileByUsername(userName);\n      if (profile != null) {\n        setLoadedProfile(profile);\n        MessageCli.PROFILE_LOADED.printMessage(capitalizeFirstLetter(userName));\n      } else {\n        MessageCli.NO_PROFILE_FOUND_TO_LOAD.printMessage(capitalizeFirstLetter(userName));\n      }\n    }\n  }\n\n  public void unloadProfile() {\n    if (isProfileLoaded()) {\n      MessageCli.PROFILE_UNLOADED.printMessage(getLoadedProfile().getUsername());\n      setLoadedProfile(null);\n    } else {\n      MessageCli.NO_PROFILE_LOADED.printMessage();\n    }\n  }\n\n  public void deleteProfile(String userName) {\n    if (isProfileLoaded() && getLoadedProfile().getUsername().equals(capitalizeFirstLetter(userName))) {\n      MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.printMessage(capitalizeFirstLetter(userName));\n    } else {\n      ClientProfile profile = findProfileByUsername(userName);\n      if (profile != null) {\n        database.remove(profile);\n        MessageCli.PROFILE_DELETED.printMessage(capitalizeFirstLetter(userName));\n      } else {\n        MessageCli.NO_PROFILE_FOUND_TO_DELETE.printMessage(capitalizeFirstLetter(userName));\n      }\n    }\n  }\n\n  public void createPolicy(PolicyType type, String[] options) {\n    if (!isProfileLoaded()) {\n      MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY.printMessage();\n      return;\n    }\n\n    switch (type) {\n      case HOME:\n        createHomePolicy(options);\n        break;\n      case CAR:\n        createCarPolicy(options);\n        break;\n      case LIFE:\n        createLifePolicy(options);\n        break;\n    }\n  }\n\n  private boolean isUsernameValid(String username) {\n    return username.length() >= 3;\n  }\n\n  private boolean isUsernameUnique(String username) {\n    for (ClientProfile profile : database) {\n      if (profile.getUsername().equalsIgnoreCase(capitalizeFirstLetter(username))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private boolean isAgeValid(String age) {\n    try {\n      int parsedAge = Integer.parseInt(age);\n      return parsedAge > 0;\n    } catch (NumberFormatException e) {\n      return false;\n    }\n  }\n\n  private String capitalizeFirstLetter(String name) {\n    String[] words = name.split(\" \");\n    StringBuilder capitalized = new StringBuilder();\n    for (String word : words) {\n      capitalized.append(Character.toUpperCase(word.charAt(0)));\n      capitalized.append(word.substring(1).toLowerCase());\n      capitalized.append(\" \");\n    }\n    return capitalized.toString().trim();\n  }\n\n  private ClientProfile findProfileByUsername(String username) {\n    for (ClientProfile profile : database) {\n      if (profile.getUsername().equalsIgnoreCase(capitalizeFirstLetter(username))) {\n        return profile;\n      }\n    }\n    return null;\n  }\n\n  private boolean isProfileLoaded() {\n    return getLoadedProfile() != null;\n  }\n\n  private ClientProfile getLoadedProfile() {\n    return database.stream()\n            .filter(ClientProfile::isLoaded)\n            .findFirst()\n            .orElse(null);\n  }\n\n  private void setLoadedProfile(ClientProfile profile) {\n    for (ClientProfile p : database) {\n      p.setLoaded(p.equals(profile));\n    }\n  }\n\n  private void printProfile(ClientProfile profile, int rank) {\n    System.out.printf(\" %d: %s, %d\\n\", rank, profile.getUsername(), profile.getAge());\n  }\n\n  private void createHomePolicy(String[] options) {\n    // TODO: Implement this method.\n  }\n\n  private void createCarPolicy(String[] options) {\n    // TODO: Implement this method.\n  }\n\n  private void createLifePolicy(String[] options) {\n    // TODO: Implement this method.\n  }\n}\n\nclass ClientProfile {\n  private String username;\n  private int age;\n  private boolean loaded;\n\n  public ClientProfile(String username, int age) {\n    this.username = username;\n    this.age = age;\n    this.loaded = false;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public int getAge() {\n    return age;\n  }\n\n  public boolean isLoaded() {\n    return loaded;\n  }\n\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n}\n```\nHere are the failing test cases:\n```\npackage nz.ac.auckland.se281;\n\nimport static nz.ac.auckland.se281.Main.Command.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\nimport org.junit.runners.Suite.SuiteClasses;\n\n@RunWith(Suite.class)\n@SuiteClasses({\n  MainTest.Task2.class\n})\npublic class MainTest {\n\n  public static class Task2 extends CliTest {\n\n    public Task2() {\n      super(Main.class);\n    }\n\n    @Test\n    public void T2_03_load_profile_found_display() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"Tom\", PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"*** 2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n\n    @Test\n    public void T2_04_load_profile_switch_profiles() throws Exception {\n      runCommands(\n          unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"tom\", LOAD_PROFILE, \"jenny\", PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertContains(\"Profile loaded for Jenny.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"*** 3: Jenny, 23\");\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n    }\n  }\n}\n```\nDO NOT ASSUME ANOTHER CLASS EXISTS!"}],
  "temperature": 0.7
}