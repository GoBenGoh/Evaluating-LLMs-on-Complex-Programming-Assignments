{
  "model": "gpt-3.5-turbo",
  "messages": [{"role": "user", "content":"The instructions for Task 2 are below marked between a pair of \"///\":\n///\nNow that the system supports creating profiles, it is time to manage those profiles. This will include loading, unloading, and deleting profiles as explained below.\n\nLoading Profiles\nThe LOAD_PROFILE command loads a profile into the system. This command requires exactly one argument, representing the username to be loaded. Again, the user might type the username in any case, but the system will always process it in title case.\n\nA success message occurs when the profile is found and successfully loaded:\n\nProfile loaded for <USERNAME>.\nIf the profile is not found, then the following message gets printed:\n\nNo profile found for <USERNAME>. Profile not loaded.\nWhen a profile is successfully loaded, the PRINT_DB command should print an extra *** in front of the currently-loaded profile. For example, if the database has three profiles, and the second profile is successfully loaded, then the PRINT_DB command should print the following:\n\nDatabase has 3 profiles:\n 1: Jordan, 21\n*** 2: Jenny, 25\n 3: John, 30\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_SHORT message template.\n\nWhile a profile is loaded, the LOAD_PROFILE command could be executed again. The new load will only succeed if the profile is found (as a usual load), otherwise it fails with the usual error when a username cannot be loaded. In this case, the currently-loaded profile remains loaded.\n\nIf the new load succeeds, the system will unload the currently-loaded profile, and load the new profile. For example, if the database has three profiles, and the second profile is successfully loaded, and then the third profile is successfully loaded, then the PRINT_DB command should print the following:\n\nDatabase has 3 profiles:\n 1: Jordan, 21\n 2: Jenny, 25\n*** 3: John, 30\nWhile a profile is loaded, the CREATE_PROFILE command should not be allowed. If the user tries to create a profile while a profile is already loaded, then the following message should be printed:\n\nCannot create a new profile. First unload the profile for <CURRENT_LOADED_PROFILE_USERNAME>.\nCreating a new profile can go ahead, only after the currently-loaded profile is unloaded (see below).\n\nUnloading Profiles\nThe UNLOAD_PROFILE command unloads the currently-loaded profile. This command requires no arguments.\n\nWhen a profile is successfully unloaded, the following message should be printed:\n\nProfile unloaded for <USERNAME>.\nIf there is no currently-loaded profile, then the following message should be printed:\n\nNo profile is currently loaded.\n\nDeleting Profiles\nThe DELETE_PROFILE command deletes a profile from the database. This command requires exactly one argument, representing the username to be deleted.\n\nWhen a profile is successfully deleted, the following message should be printed:\n\nProfile deleted for <USERNAME>.\nWhen a profile is successfully deleted, this means it will no longer exist in the database.\n\nIf the profile is not found, then the following message gets printed:\n\nNo profile found for <USERNAME>. No profile was deleted.\nIf the profile is currently loaded, then the deletion should not go ahead and the following message gets printed:\n\nCannot delete profile for <USERNAME> while loaded. No profile was deleted.\nThe loaded profile must be unloaded before it can be deleted.\n\nIt is however perfectly fine to delete a profile that is not currently loaded, as long as it exists in the database.\n///\n\nPlease fix the following code according to these instructions:\n\"\"\"\npackage nz.ac.auckland.se281;\n\nimport nz.ac.auckland.se281.Main.PolicyType;\n\npublic class InsuranceSystem {\n  public InsuranceSystem() {\n    // Only this constructor can be used (if you need to initialise fields).\n  }\n\n  public void printDatabase() {\n    // TODO: Complete this method.\n  }\n\n  public void createNewProfile(String userName, String age) {\n    // TODO: Complete this method.\n  }\n\n  public void loadProfile(String userName) {\n    // TODO: Complete this method.\n  }\n\n  public void unloadProfile() {\n    // TODO: Complete this method.\n  }\n\n  public void deleteProfile(String userName) {\n    // TODO: Complete this method.\n  }\n\n  public void createPolicy(PolicyType type, String[] options) {\n    // TODO: Complete this method.\n  }\n}\n\"\"\"\nHere are the test cases that must pass:\n\"\"\"\npackage nz.ac.auckland.se281;\n\nimport static nz.ac.auckland.se281.Main.Command.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\nimport org.junit.runners.Suite.SuiteClasses;\n\n@RunWith(Suite.class)\n@SuiteClasses({\n  MainTest.Task2.class, // Uncomment this line when to start Task 2\n  MainTest.Task3.class, // Uncomment this line when to start Task 3\n  // MainTest.YourTests.class, // Uncomment this line to run your own tests\n})\npublic class MainTest {\n\n  public static class Task2 extends CliTest {\n\n    public Task2() {\n      super(Main.class);\n    }\n\n    @Test\n    public void T2_xx_load_profile_found() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Tom\"));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertDoesNotContain(\"No profile found for Tom. Profile not loaded.\", true);\n    }\n\n    @Test\n    public void T2_xx_load_profile_not_found() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Alex\"));\n\n      assertContains(\"No profile found for Alex. Profile not loaded.\");\n      assertDoesNotContain(\"Profile loaded for Alex.\", true);\n    }\n\n    @Test\n    public void T2_xx_load_profile_found_display() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Tom\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"*** 2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n\n    @Test\n    public void T2_xx_load_profile_not_found_display() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Alex\", //\n              PRINT_DB));\n\n      assertContains(\"No profile found for Alex. Profile not loaded.\");\n      assertDoesNotContain(\"Profile loaded for Alex.\", true);\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertDoesNotContain(\"***\");\n    }\n\n    @Test\n    public void T2_xx_load_profile_found_ignore_case_display() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"tom\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"*** 2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n\n    @Test\n    public void T2_xx_load_profile_switch_profiles() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"tom\", //\n              LOAD_PROFILE,\n              \"jenny\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertContains(\"Profile loaded for Jenny.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"*** 3: Jenny, 23\");\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n    }\n\n    @Test\n    public void T2_xx_load_profile_ignore_invalid_switch() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"jordan\", //\n              LOAD_PROFILE,\n              \"unknown\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jordan.\");\n      assertContains(\"No profile found for Unknown. Profile not loaded.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"*** 1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertDoesNotContain(\"Profile loaded for unknown\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n    }\n\n    @Test\n    public void T2_xx_unload_profile() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Jenny\", //\n              UNLOAD_PROFILE, //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n      assertContains(\"Profile unloaded for Jenny.\");\n\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n    }\n\n    @Test\n    public void T2_xx_unload_invalid_profile() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"jen\", //\n              UNLOAD_PROFILE, //\n              PRINT_DB));\n\n      assertContains(\"No profile is currently loaded.\");\n\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n    }\n\n    @Test\n    public void T2_xx_cannot_create_profile_while_loaded() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"TOM\", //\n              CREATE_PROFILE,\n              \"Who\",\n              19, //\n              PRINT_DB));\n\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"*** 2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertContains(\"Cannot create a new profile. First unload the profile for Tom.\");\n\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n      assertDoesNotContain(\"Who, 19\", true);\n    }\n\n    @Test\n    public void T2_xx_can_create_profile_after_unloading() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"TOM\", //\n              UNLOAD_PROFILE, //\n              CREATE_PROFILE,\n              \"who\",\n              19, //\n              PRINT_DB));\n\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n      assertContains(\"4: Who, 19\");\n\n      assertDoesNotContain(\"Cannot create a new profile. First unload the profile for Tom.\", true);\n\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n    }\n\n    @Test\n    public void T2_xx_delete_profile_found() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              DELETE_PROFILE,\n              \"jordan\", //\n              PRINT_DB));\n\n      assertContains(\"Profile deleted for Jordan.\");\n      assertContains(\"Database has 2 profiles:\");\n      assertContains(\"1: Tom, 25\");\n      assertContains(\"2: Jenny, 23\");\n      assertDoesNotContain(\"Jordan, 21\", true);\n    }\n\n    @Test\n    public void T2_xx_delete_profile_not_found() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              DELETE_PROFILE,\n              \"alex\", //\n              PRINT_DB));\n\n      assertDoesNotContain(\"Profile deleted for Alex\", true);\n      assertContains(\"No profile found for Alex. No profile was deleted.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n\n    @Test\n    public void T2_xx_delete_profile_while_loaded() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Jenny\", //\n              DELETE_PROFILE,\n              \"jenny\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n\n      assertContains(\"Cannot delete profile for Jenny while loaded. No profile was deleted.\");\n      assertDoesNotContain(\"Profile deleted for Jenny\", true);\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n\n    @Test\n    public void T2_xx_delete_profile_while_another_is_loaded() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Jenny\", //\n              DELETE_PROFILE,\n              \"tom\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n      assertContains(\"Profile deleted for Tom.\");\n\n      assertContains(\"Database has 2 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Jenny, 23\");\n      assertDoesNotContain(\"Tom, 25\", true);\n    }\n\n    @Test\n    public void T2_xx_delete_profile_after_unloaded() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"tom\", //\n              UNLOAD_PROFILE, //\n              DELETE_PROFILE,\n              \"TOM\", //\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertContains(\"Profile unloaded for Tom.\");\n      assertContains(\"Profile deleted for Tom.\");\n\n      assertContains(\"Database has 2 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Jenny, 23\");\n      assertDoesNotContain(\"Tom, 25\", true);\n    }\n  }\n}\n\"\"\"\nDO NOT ASSUME ANOTHER CLASS EXISTS!"}],
  "temperature": 0.5
}