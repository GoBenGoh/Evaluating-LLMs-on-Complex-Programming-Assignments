{
  "model": "gpt-3.5-turbo-16k",
  "messages": [{"role": "user", "content":"The instructions for Task 1 are below marked between a pair of \"///\":\n///\nTask 1 will require you to implement (some of) the logic for the CREATE_PROFILE and PRINT_DB commands.\n\nThe CREATE_PROFILE command creates a new client profile with the specified username and age (passed as arguments to the CREATE_PROFILE command). The username should be unique across all other usernames currently in the system, and the age should be a positive integer. If the username is not unique, or the age is not a positive integer, an error message should be printed.\n\nThe PRINT_DB command prints the entire insurance database. If the database is empty, it prints the following:\n\nDatabase has 0 profiles.\nIf the database has exactly one profile, it prints the following:\n\nDatabase has 1 profile:\n 1: Jordan, 21\nIf the database has more than one profile, it prints the following:\n\nDatabase has 2 profiles:\n 1: Jordan, 21\n 2: John, 22\nTake note of the differences between the 3 cases above:\n\nIn the first example, “profiles” is plural, and the sentence ends with a period (“.”)\nIn the second example, “profile” is singular, and the sentence ends with a colon (“:”)\nIn the third example, “profiles” is plural, and the sentence ends with a colon (“:”)\nHint: Have a look at the MessageCli.PRINT_DB_POLICY_COUNT message template:\n\nPRINT_DB_POLICY_COUNT(\"Database has %s profile%s%s\")\nThis message template has three %s placeholders:\n\nThe first %s is for the number of profiles (e.g., “0”, “1”, “2”, etc.)\nThe second %s is for the word “profile”, whether you want it to be singular or plural (i.e., “profile” or “profiles”)\nThe third %s is for ending the sentence (i.e., “.” or “:”)\nTo get the messahe \"Database has 2 profiles:\", you can do one of the following:\n\nMessageCli.PRINT_DB_POLICY_COUNT.getMessage(\"2\", \"s\", \":\");    // Using the getMessage() method\nMessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"2\", \"s\", \":\");  // Using the printMessage() method\n\nIn addition to above header, if there is at least one profile in the database, the PRINT_DB should also print the following for every profile in the database:\n\n<SPACE><RANK><COLON><SPACE><USERNAME><COMMA><SPACE><AGE>\nFor example, for the database with two profiles:\n\nDatabase has 2 profiles:\n 1: Jordan, 21\n 2: Jenny, 25\n\nHint: The <RANK> is the position of the profile in the database, in the order they were added successfully into the system, starting from 1. This is not an “ID” of the profile (so, you should not be trying to implement this using static variables).\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL message template.\n\nWhen a new profile is created, it should be added to the database. The arguments have the following requirements:\n\n<USERNAME> (✭)\nMust be unique across all other usernames currently in the system\nMust be at least 3 characters long\nThe username will only be a single word (✱)\nThe user may type the username using any case, but your system needs to always process it in title case (i.e., the first letter of each word is capitalised, with the rest of the letters being lowercase)\n<AGE> (✭)\nShould be a positive integer\n✱ You do not need to worry about the user typing in a username that is more than one word. For example, you do not need to worry about the user typing in CREATE_PROFILE John Smith 21. You can assume that the user will always type in a username that is a single word.\n\n✭ You do not need to worry about test cases where there are multiple errors in the same command. For example, you do not need to worry about the user typing in CREATE_PROFILE Jo twenty (i.e., the username is too short, and the age is not a positive integer). You can assume that the user will always type in a command that has only one error.\n\nWhen a successful profile is created, a success message should be printed.\n\nNew profile created for <USERNAME> with age <AGE>.\nFor example:\n\ninsurance system> create-profile joRDaN 21\nNew profile created for Jordan with age 21.  // success message\nTake note of how the system printed the name as “Jordan” (i.e., in title case), even though the user typed “joRDaN” (i.e., in weird case).\n\nThe format of this message is very strict. Make sure you check for an appropriate message template in MessageCli to help you.\n\nIf there was something wrong with the username, then the above success message should not be printed. Instead, one of the following messages gets printed.\n\nIf the username is too short, then the following message gets printed:\n\n'<USERNAME>' is an invalid username, it should be at least 3 characters long. No profile was created.\nConsider the following example, paying attention to how the user types the username versus how the system prints it:\n\ninsurance system> create-profile jo 21\n'Jo' is an invalid username, it should be at least 3 characters long. No profile was created.\nThe system printed the name as “Jo” (i.e., in title case), even though the user typed “jo”.\n\nIf the username already exists, then the following message gets printed:\n\nUsernames must be unique. No profile was created for '<USERNAME>'.\nConsider the following example, paying attention to how the user types the username versus how the system prints it:\n\ninsurance system> create-profile jordan 21  // first time adding a Jordan, so this is successful\nNew profile created for Jordan with age 21.\ninsurance system> create-profile jorDan 35  // second time adding a Jordan, so this is unsuccessful\nUsernames must be unique. No profile was created for 'Jordan'.\nIf the age is not a positive integer, then following message gets printed:\n\n'<AGE>' is an invalid age, please provide a positive whole number only. No profile was created for <USERNAME>.\nAgain, remember that the system will always print the username in title case, regardless of how the user types it.\n///\nThe following Task 1 code does not compile as the ClientProfile class does not exist. Please rewrite the code so that this compilation error does not occur again.\n```package nz.ac.auckland.se281;\n\nimport nz.ac.auckland.se281.Main.PolicyType;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class InsuranceSystem {\n  private List<ClientProfile> database;\n  private ClientProfile loadedProfile;\n\n  public InsuranceSystem() {\n    this.database = new ArrayList<>();\n    this.loadedProfile = null;\n  }\n\n  public void printDatabase() {\n    if (database.isEmpty()) {\n      MessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"0\", \"s\", \".\");\n    } else if (database.size() == 1) {\n      MessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"1\", \"\", \":\");\n      MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.printMessage(\"1\", database.get(0).getUsername(), String.valueOf(database.get(0).getAge()));\n    } else {\n      MessageCli.PRINT_DB_POLICY_COUNT.printMessage(String.valueOf(database.size()), \"s\", \":\");\n      for (int i = 0; i < database.size(); i++) {\n        MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.printMessage(String.valueOf(i + 1), database.get(i).getUsername(), String.valueOf(database.get(i).getAge()));\n      }\n    }\n  }\n\n  public void createNewProfile(String userName, String age) {\n    if (!isUniqueUsername(userName)) {\n      MessageCli.INVALID_USERNAME_NOT_UNIQUE.printMessage(userName);\n    } else if (userName.length() < 3) {\n      MessageCli.INVALID_USERNAME_TOO_SHORT.printMessage(userName);\n    } else if (!isPositiveInteger(age)) {\n      MessageCli.INVALID_AGE.printMessage(age, userName);\n    } else {\n      String formattedUserName = toTitleCase(userName);\n      int formattedAge = Integer.parseInt(age);\n      ClientProfile newProfile = new ClientProfile(formattedUserName, formattedAge);\n      database.add(newProfile);\n      MessageCli.PROFILE_CREATED.printMessage(formattedUserName, String.valueOf(formattedAge));\n    }\n  }\n\n  public void loadProfile(String userName) {\n    if (loadedProfile != null) {\n      MessageCli.CANNOT_CREATE_WHILE_LOADED.printMessage(loadedProfile.getUsername());\n    } else {\n      ClientProfile profile = findProfileByUsername(userName);\n      if (profile == null) {\n        MessageCli.NO_PROFILE_FOUND_TO_LOAD.printMessage(userName);\n      } else {\n        loadedProfile = profile;\n        MessageCli.PROFILE_LOADED.printMessage(profile.getUsername());\n      }\n    }\n  }\n\n  public void unloadProfile() {\n    if (loadedProfile == null) {\n      MessageCli.NO_PROFILE_LOADED.printMessage();\n    } else {\n      MessageCli.PROFILE_UNLOADED.printMessage(loadedProfile.getUsername());\n      loadedProfile = null;\n    }\n  }\n\n  public void deleteProfile(String userName) {\n    if (loadedProfile != null && loadedProfile.getUsername().equals(userName)) {\n      MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.printMessage(userName);\n    } else {\n      ClientProfile profile = findProfileByUsername(userName);\n      if (profile == null) {\n        MessageCli.NO_PROFILE_FOUND_TO_DELETE.printMessage(userName);\n      } else {\n        database.remove(profile);\n        MessageCli.PROFILE_DELETED.printMessage(userName);\n      }\n    }\n  }\n\n  public void createPolicy(PolicyType type, String[] options) {\n    if (loadedProfile == null) {\n      MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY.printMessage();\n    } else {\n      switch (type) {\n        case HOME:\n          createHomePolicy(options);\n          break;\n        case CAR:\n          createCarPolicy(options);\n          break;\n        case LIFE:\n          createLifePolicy(options);\n          break;\n      }\n    }\n  }\n\n  private void createHomePolicy(String[] options) {\n    // TODO: Implement this method.\n  }\n\n  private void createCarPolicy(String[] options) {\n    // TODO: Implement this method.\n  }\n\n  private void createLifePolicy(String[] options) {\n    // TODO: Implement this method.\n  }\n\n  private boolean isUniqueUsername(String userName) {\n    for (ClientProfile profile : database) {\n      if (profile.getUsername().equalsIgnoreCase(userName)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private boolean isPositiveInteger(String str) {\n    try {\n      int num = Integer.parseInt(str);\n      return num > 0;\n    } catch (NumberFormatException e) {\n      return false;\n    }\n  }\n\n  private String toTitleCase(String str) {\n    String[] words = str.split(\" \");\n    StringBuilder result = new StringBuilder();\n    for (String word : words) {\n      result.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1).toLowerCase()).append(\" \");\n    }\n    return result.toString().trim();\n  }\n\n  private ClientProfile findProfileByUsername(String userName) {\n    for (ClientProfile profile : database) {\n      if (profile.getUsername().equalsIgnoreCase(userName)) {\n        return profile;\n      }\n    }\n    return null;\n  }\n}\n```"}],
  "temperature": 0.5
}