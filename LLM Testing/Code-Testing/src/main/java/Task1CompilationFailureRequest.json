{
  "model": "gpt-3.5-turbo-16k",
  "messages": [
    {
      "role": "user",
      "content": "The instructions for Task 1 are below marked between a pair of \"///\":\r\n///\r\nTask 1 will require you to implement (some of) the logic for the CREATE_PROFILE and PRINT_DB commands.\r\n\r\nThe CREATE_PROFILE command creates a new client profile with the specified username and age (passed as arguments to the CREATE_PROFILE command). The username should be unique across all other usernames currently in the system, and the age should be a positive integer. If the username is not unique, or the age is not a positive integer, an error message should be printed.\r\n\r\nThe PRINT_DB command prints the entire insurance database. If the database is empty, it prints the following:\r\n\r\nDatabase has 0 profiles.\r\nIf the database has exactly one profile, it prints the following:\r\n\r\nDatabase has 1 profile:\r\n 1: Jordan, 21\r\nIf the database has more than one profile, it prints the following:\r\n\r\nDatabase has 2 profiles:\r\n 1: Jordan, 21\r\n 2: John, 22\r\nTake note of the differences between the 3 cases above:\r\n\r\nIn the first example, “profiles” is plural, and the sentence ends with a period (“.”)\r\nIn the second example, “profile” is singular, and the sentence ends with a colon (“:”)\r\nIn the third example, “profiles” is plural, and the sentence ends with a colon (“:”)\r\nHint: Have a look at the MessageCli.PRINT_DB_POLICY_COUNT message template:\r\n\r\nPRINT_DB_POLICY_COUNT(\"Database has %s profile%s%s\")\r\nThis message template has three %s placeholders:\r\n\r\nThe first %s is for the number of profiles (e.g., “0”, “1”, “2”, etc.)\r\nThe second %s is for the word “profile”, whether you want it to be singular or plural (i.e., “profile” or “profiles”)\r\nThe third %s is for ending the sentence (i.e., “.” or “:”)\r\nTo get the messahe \"Database has 2 profiles:\", you can do one of the following:\r\n\r\nMessageCli.PRINT_DB_POLICY_COUNT.getMessage(\"2\", \"s\", \":\");    // Using the getMessage() method\r\nMessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"2\", \"s\", \":\");  // Using the printMessage() method\r\n\r\nIn addition to above header, if there is at least one profile in the database, the PRINT_DB should also print the following for every profile in the database:\r\n\r\n<SPACE><RANK><COLON><SPACE><USERNAME><COMMA><SPACE><AGE>\r\nFor example, for the database with two profiles:\r\n\r\nDatabase has 2 profiles:\r\n 1: Jordan, 21\r\n 2: Jenny, 25\r\n\r\nHint: The <RANK> is the position of the profile in the database, in the order they were added successfully into the system, starting from 1. This is not an “ID” of the profile (so, you should not be trying to implement this using static variables).\r\n\r\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL message template.\r\n\r\nWhen a new profile is created, it should be added to the database. The arguments have the following requirements:\r\n\r\n<USERNAME> (✭)\r\nMust be unique across all other usernames currently in the system\r\nMust be at least 3 characters long\r\nThe username will only be a single word (✱)\r\nThe user may type the username using any case, but your system needs to always process it in title case (i.e., the first letter of each word is capitalised, with the rest of the letters being lowercase)\r\n<AGE> (✭)\r\nShould be a positive integer\r\n✱ You do not need to worry about the user typing in a username that is more than one word. For example, you do not need to worry about the user typing in CREATE_PROFILE John Smith 21. You can assume that the user will always type in a username that is a single word.\r\n\r\n✭ You do not need to worry about test cases where there are multiple errors in the same command. For example, you do not need to worry about the user typing in CREATE_PROFILE Jo twenty (i.e., the username is too short, and the age is not a positive integer). You can assume that the user will always type in a command that has only one error.\r\n\r\nWhen a successful profile is created, a success message should be printed.\r\n\r\nNew profile created for <USERNAME> with age <AGE>.\r\nFor example:\r\n\r\ninsurance system> create-profile joRDaN 21\r\nNew profile created for Jordan with age 21.  // success message\r\nTake note of how the system printed the name as “Jordan” (i.e., in title case), even though the user typed “joRDaN” (i.e., in weird case).\r\n\r\nThe format of this message is very strict. Make sure you check for an appropriate message template in MessageCli to help you.\r\n\r\nIf there was something wrong with the username, then the above success message should not be printed. Instead, one of the following messages gets printed.\r\n\r\nIf the username is too short, then the following message gets printed:\r\n\r\n'<USERNAME>' is an invalid username, it should be at least 3 characters long. No profile was created.\r\nConsider the following example, paying attention to how the user types the username versus how the system prints it:\r\n\r\ninsurance system> create-profile jo 21\r\n'Jo' is an invalid username, it should be at least 3 characters long. No profile was created.\r\nThe system printed the name as “Jo” (i.e., in title case), even though the user typed “jo”.\r\n\r\nIf the username already exists, then the following message gets printed:\r\n\r\nUsernames must be unique. No profile was created for '<USERNAME>'.\r\nConsider the following example, paying attention to how the user types the username versus how the system prints it:\r\n\r\ninsurance system> create-profile jordan 21  // first time adding a Jordan, so this is successful\r\nNew profile created for Jordan with age 21.\r\ninsurance system> create-profile jorDan 35  // second time adding a Jordan, so this is unsuccessful\r\nUsernames must be unique. No profile was created for 'Jordan'.\r\nIf the age is not a positive integer, then following message gets printed:\r\n\r\n'<AGE>' is an invalid age, please provide a positive whole number only. No profile was created for <USERNAME>.\r\nAgain, remember that the system will always print the username in title case, regardless of how the user types it.\r\n///\r\nThe following section is an existing Java class named MessageCli:\r\n```\r\npackage nz.ac.auckland.se281;\r\n\r\n/** You cannot modify this class! */\r\npublic enum MessageCli {\r\n  COMMAND_NOT_FOUND(\r\n      \"Error! Command not found! (run 'help' for the list of available commands): \\\"%s\\\"\"),\r\n  WRONG_ARGUMENT_COUNT(\r\n      \"Error! Incorrect number of arguments provided. Expected %s argument%s for the \\\"%s\\\"\"\r\n          + \" command\"),\r\n\r\n  PRINT_DB_POLICY_COUNT(\"Database has %s profile%s%s\"),\r\n  PRINT_DB_PROFILE_HEADER_MINIMAL(\" %s: %s, %s\"),\r\n  PRINT_DB_PROFILE_HEADER_SHORT(\" %s%s: %s, %s\"),\r\n  PRINT_DB_PROFILE_HEADER_MEDIUM(\" %s%s: %s, %s, %s polic%s\"),\r\n  PRINT_DB_PROFILE_HEADER_LONG(\" %s%s: %s, %s, %s polic%s for a total of $%s\"),\r\n\r\n  PRINT_DB_CAR_POLICY(\"\\tCar Policy (%s, Sum Insured: $%s, Premium: $%s -> $%s)\"),\r\n  PRINT_DB_HOME_POLICY(\"\\tHome Policy (%s, Sum Insured: $%s, Premium: $%s -> $%s)\"),\r\n  PRINT_DB_LIFE_POLICY(\"\\tLife Policy (Sum Insured: $%s, Premium: $%s -> $%s)\"),\r\n\r\n  INVALID_USERNAME_TOO_SHORT(\r\n      \"'%s' is an invalid username, it should be at least 3 characters long. No profile was\"\r\n          + \" created.\"),\r\n  INVALID_USERNAME_NOT_UNIQUE(\"Usernames must be unique. No profile was created for '%s'.\"),\r\n  INVALID_AGE(\r\n      \"'%s' is an invalid age, please provide a positive whole number only. No profile was created\"\r\n          + \" for %s.\"),\r\n\r\n  CANNOT_CREATE_WHILE_LOADED(\"Cannot create a new profile. First unload the profile for %s.\"),\r\n\r\n  PROFILE_CREATED(\"New profile created for %s with age %s.\"),\r\n  PROFILE_DELETED(\"Profile deleted for %s.\"),\r\n  PROFILE_LOADED(\"Profile loaded for %s.\"),\r\n  PROFILE_UNLOADED(\"Profile unloaded for %s.\"),\r\n\r\n  NO_PROFILE_FOUND_TO_LOAD(\"No profile found for %s. Profile not loaded.\"),\r\n  NO_PROFILE_FOUND_TO_DELETE(\"No profile found for %s. No profile was deleted.\"),\r\n  NO_PROFILE_FOUND_TO_CREATE_POLICY(\"Need to load a profile in order to create a policy.\"),\r\n\r\n  NO_PROFILE_LOADED(\"No profile is currently loaded.\"),\r\n  CANNOT_DELETE_PROFILE_WHILE_LOADED(\r\n      \"Cannot delete profile for %s while loaded. No profile was deleted.\"),\r\n\r\n  NEW_POLICY_CREATED(\"New %s policy created for %s.\"),\r\n  ALREADY_HAS_LIFE_POLICY(\"%s already has a life policy. No new policy was created.\"),\r\n  OVER_AGE_LIMIT_LIFE_POLICY(\"%s is over the age limit. No policy was created.\"),\r\n\r\n  DISCOUNT_TWO(\"Two policies are in place, client will get 10% discount\"),\r\n  DISCOUNT_MULTIPLE(\"Multiple policies are in place, client will get 20% discount\"),\r\n\r\n  END(\"You closed the terminal. Goodbye.\");\r\n\r\n  private final String msg;\r\n\r\n  private MessageCli(final String msg) {\r\n    this.msg = msg;\r\n  }\r\n\r\n  public String getMessage(final String... args) {\r\n    String tmpMessage = msg;\r\n\r\n    for (final String arg : args) {\r\n      tmpMessage = tmpMessage.replaceFirst(\"%s\", arg);\r\n    }\r\n\r\n    return tmpMessage;\r\n  }\r\n\r\n  public void printMessage(final String... args) {\r\n    System.out.println(getMessage(args));\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return msg;\r\n  }\r\n}\r\n```\r\nThe following section shows the Main Java class:\r\n```\r\npackage nz.ac.auckland.se281;\r\n\r\nimport java.util.Scanner;\r\n\r\n/** You cannot modify this class! */\r\npublic class Main {\r\n  public enum PolicyType {\r\n    HOME,\r\n    CAR,\r\n    LIFE,\r\n  }\r\n\r\n  public enum Command {\r\n    PRINT_DB(0, \"Print the entire insurance database\"),\r\n\r\n    CREATE_PROFILE(2, \"Create a new client profile <USERNAME> <AGE>\"),\r\n    LOAD_PROFILE(1, \"Load the specified profile <USERNAME>\"),\r\n    UNLOAD_PROFILE(0, \"Unload the currently-loaded profile\"),\r\n    DELETE_PROFILE(1, \"Delete the specified profile <USERNAME> from the database\"),\r\n\r\n    POLICY_HOME(\r\n        0,\r\n        \"Create a new home policy for the currently-loaded profile\",\r\n        \"Sum to insure\",\r\n        \"Property address\",\r\n        \"Rental? (y/n)\"),\r\n    POLICY_CAR(\r\n        0,\r\n        \"Create a new car policy for the currently-loaded profile\",\r\n        \"Sum to insure\",\r\n        \"Make and model\",\r\n        \"License plate\",\r\n        \"Mechanical warranty? (y/n)\"),\r\n    POLICY_LIFE(0, \"Create a new life policy for the currently-loaded profile\", \"Sum to insure\"),\r\n\r\n    HELP(0, \"Print usage\"),\r\n    EXIT(0, \"Exit the application\");\r\n\r\n    private final int numArgs;\r\n    private final String message;\r\n    private final String[] optionPrompts;\r\n\r\n    private Command(final int numArgs, final String message) {\r\n      this(numArgs, message, new String[] {});\r\n    }\r\n\r\n    private Command(final int numArgs, final String message, final String... optionPrompts) {\r\n      this.numArgs = numArgs;\r\n      this.message = message;\r\n      this.optionPrompts = optionPrompts;\r\n    }\r\n\r\n    public boolean hasArguments() {\r\n      return numArgs > 0;\r\n    }\r\n\r\n    public int getNumArgs() {\r\n      return numArgs;\r\n    }\r\n\r\n    public boolean hasOptions() {\r\n      return optionPrompts.length > 0;\r\n    }\r\n\r\n    public int getNumOptions() {\r\n      return optionPrompts.length;\r\n    }\r\n\r\n    public String getOptionPrompt(final int index) {\r\n      return optionPrompts[index];\r\n    }\r\n  }\r\n\r\n  private static final String COMMAND_PREFIX = \"insurance system> \";\r\n\r\n  public static void main(final String[] args) {\r\n    new Main(new Scanner(System.in), new InsuranceSystem()).start();\r\n  }\r\n\r\n  public static String help() {\r\n    final StringBuilder sb = new StringBuilder();\r\n\r\n    for (final Command command : Command.values()) {\r\n      sb.append(command).append(\"\\t\");\r\n\r\n      // Add extra padding to align the argument counts\r\n      // if the command name is less than the tab width.\r\n      if (command.toString().length() < 8) {\r\n        sb.append(\"\\t\");\r\n      }\r\n\r\n      if (command.numArgs > 0) {\r\n        sb.append(\"[\").append(command.numArgs).append(\" arguments]\");\r\n      } else {\r\n        sb.append(\"[no args]\");\r\n      }\r\n\r\n      sb.append(\"\\t\").append(command.message).append(System.lineSeparator());\r\n    }\r\n\r\n    return sb.toString();\r\n  }\r\n\r\n  private static void printBanner() {\r\n    // https://patorjk.com/software/taag/\r\n    // https://www.freeformatter.com/java-dotnet-escape.html#before-output\r\n\r\n    System.out.println(\r\n        \"\\r\\n\"\r\n            + \" $$$$$$\\\\   $$$$$$\\\\    $$\\\\         $$$$$$\\\\\\r\\n\"\r\n            + \"$$  __$$\\\\ $$  __$$\\\\ $$$$ |        \\\\_$$  _|\\r\\n\"\r\n            + \"\\\\__/  $$ |$$ /  $$ |\\\\_$$ |          $$ |  $$$$$$$\\\\   $$$$$$$\\\\ $$\\\\   $$\\\\ \"\r\n            + \" $$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\   $$$$$$$\\\\  $$$$$$\\\\\\r\\n\"\r\n            + \" $$$$$$  | $$$$$$  |  $$ |          $$ |  $$  __$$\\\\ $$  _____|$$ |  $$ |$$  __$$\\\\\"\r\n            + \" \\\\____$$\\\\ $$  __$$\\\\ $$  _____|$$  __$$\\\\\\r\\n\"\r\n            + \"$$  ____/ $$  __$$<   $$ |          $$ |  $$ |  $$ |\\\\$$$$$$\\\\  $$ |  $$ |$$ | \"\r\n            + \" \\\\__|$$$$$$$ |$$ |  $$ |$$ /      $$$$$$$$ |\\r\\n\"\r\n            + \"$$ |      $$ /  $$ |  $$ |          $$ |  $$ |  $$ | \\\\____$$\\\\ $$ |  $$ |$$ |    \"\r\n            + \" $$  __$$ |$$ |  $$ |$$ |      $$   ____|\\r\\n\"\r\n            + \"$$$$$$$$\\\\ \\\\$$$$$$  |$$$$$$\\\\       $$$$$$\\\\ $$ |  $$ |$$$$$$$  |\\\\$$$$$$  |$$ |   \"\r\n            + \"  \\\\$$$$$$$ |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$\\\\\\r\\n\"\r\n            + \"\\\\________| \\\\______/ \\\\______|      \\\\______|\\\\__|  \\\\__|\\\\_______/  \\\\______/\"\r\n            + \" \\\\__|      \\\\_______|\\\\__|  \\\\__| \\\\_______| \\\\_______|\\r\\n\");\r\n  }\r\n\r\n  private final Scanner scanner;\r\n\r\n  private final InsuranceSystem insuranceSystem;\r\n\r\n  public Main(final Scanner scanner, final InsuranceSystem insuranceSystem) {\r\n    this.scanner = scanner;\r\n    this.insuranceSystem = insuranceSystem;\r\n  }\r\n\r\n  public void start() {\r\n    printBanner();\r\n    System.out.println(help());\r\n\r\n    String command;\r\n\r\n    // Prompt and process commands until the exit command.\r\n    do {\r\n      System.out.print(COMMAND_PREFIX);\r\n      command = scanner.nextLine().trim();\r\n    } while (processCommand(command));\r\n  }\r\n\r\n  private boolean processCommand(String input) {\r\n    // Remove whitespace at the beginning and end of the input.\r\n    input = input.trim();\r\n\r\n    final String[] args = input.split(\" \");\r\n\r\n    // Allow any case, and dashes to be used instead of underscores.\r\n    final String commandStr = args[0].toUpperCase().replaceAll(\"-\", \"_\");\r\n\r\n    final Command command;\r\n\r\n    try {\r\n      // Command names correspond to the enum names.\r\n      command = Command.valueOf(commandStr);\r\n    } catch (final Exception e) {\r\n      MessageCli.COMMAND_NOT_FOUND.printMessage(commandStr);\r\n      return true;\r\n    }\r\n\r\n    if (!checkArgs(command, args)) {\r\n      MessageCli.WRONG_ARGUMENT_COUNT.printMessage(\r\n          String.valueOf(command.getNumArgs()), command.getNumArgs() > 1 ? \"s\" : \"\", commandStr);\r\n      return true;\r\n    }\r\n\r\n    switch (command) {\r\n      case CREATE_PROFILE:\r\n        insuranceSystem.createNewProfile(args[1], args[2]);\r\n        break;\r\n      case LOAD_PROFILE:\r\n        insuranceSystem.loadProfile(args[1]);\r\n        break;\r\n      case UNLOAD_PROFILE:\r\n        insuranceSystem.unloadProfile();\r\n        break;\r\n      case DELETE_PROFILE:\r\n        insuranceSystem.deleteProfile(args[1]);\r\n        break;\r\n      case PRINT_DB:\r\n        insuranceSystem.printDatabase();\r\n        break;\r\n      case POLICY_HOME:\r\n        insuranceSystem.createPolicy(PolicyType.HOME, processOptions(command));\r\n        break;\r\n      case POLICY_CAR:\r\n        insuranceSystem.createPolicy(PolicyType.CAR, processOptions(command));\r\n        break;\r\n      case POLICY_LIFE:\r\n        insuranceSystem.createPolicy(PolicyType.LIFE, processOptions(command));\r\n        break;\r\n      case EXIT:\r\n        MessageCli.END.printMessage();\r\n\r\n        // Signal that the program should exit.\r\n        return false;\r\n      case HELP:\r\n        System.out.println(help());\r\n        break;\r\n    }\r\n\r\n    // Signal that another command is expected.\r\n    return true;\r\n  }\r\n\r\n  private String[] processOptions(final Command command) {\r\n    final String[] options = new String[command.getNumOptions()];\r\n\r\n    for (int i = 0; i < command.getNumOptions(); i++) {\r\n      System.out.print(\"\\t\" + command.getOptionPrompt(i) + \": \");\r\n      options[i] = scanner.nextLine().trim();\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  private boolean checkArgs(final Command command, final String[] args) {\r\n    return command.getNumArgs() == args.length - 1;\r\n  }\r\n}\r\n```\r\nThe following Task 1 code does not compile. The compilation error is displayed below.\r\n```\r\n```\r\nPlease rewrite the code below so that it compiles. Do not assume another class exists! Do not explain the changes made! Only respond with java code!\r\n```\rpackage nz.ac.auckland.se281;\r\n\r\nimport nz.ac.auckland.se281.Main.PolicyType;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class InsuranceSystem {\r\n    private List<ClientProfile> database;\r\n    private ClientProfile loadedProfile;\r\n\r\n    public InsuranceSystem() {\r\n        this.database = new ArrayList<>();\r\n        this.loadedProfile = null;\r\n    }\r\n\r\n    public void printDatabase() {\r\n        if (database.isEmpty()) {\r\n            MessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"0\", \"s\", \".\");\r\n        } else if (database.size() == 1) {\r\n            MessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"1\", \"\", \":\");\r\n            MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.printMessage(\"1\", database.get(0).getUsername(), String.valueOf(database.get(0).getAge()));\r\n        } else {\r\n            MessageCli.PRINT_DB_POLICY_COUNT.printMessage(String.valueOf(database.size()), \"s\", \":\");\r\n            for (int i = 0; i < database.size(); i++) {\r\n                MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.printMessage(String.valueOf(i + 1), database.get(i).getUsername(), String.valueOf(database.get(i).getAge()));\r\n            }\r\n        }\r\n    }\r\n\r\n    public void createNewProfile(String userName, String age) {\r\n        if (!isUniqueUsername(userName)) {\r\n            MessageCli.INVALID_USERNAME_NOT_UNIQUE.printMessage(userName);\r\n        } else if (userName.length() < 3) {\r\n            MessageCli.INVALID_USERNAME_TOO_SHORT.printMessage(userName);\r\n        } else if (!isPositiveInteger(age)) {\r\n            MessageCli.INVALID_AGE.printMessage(age, userName);\r\n        } else {\r\n            String formattedUserName = toTitleCase(userName);\r\n            int formattedAge = Integer.parseInt(age);\r\n            ClientProfile newProfile = new ClientProfile(formattedUserName, formattedAge);\r\n            database.add(newProfile);\r\n            MessageCli.PROFILE_CREATED.printMessage(formattedUserName, String.valueOf(formattedAge));\r\n        }\r\n    }\r\n\r\n    public void loadProfile(String userName) {\r\n        if (loadedProfile != null) {\r\n            MessageCli.CANNOT_CREATE_WHILE_LOADED.printMessage(loadedProfile.getUsername());\r\n        } else {\r\n            ClientProfile profile = findProfileByUsername(userName);\r\n            if (profile == null) {\r\n                MessageCli.NO_PROFILE_FOUND_TO_LOAD.printMessage(userName);\r\n            } else {\r\n                loadedProfile = profile;\r\n                MessageCli.PROFILE_LOADED.printMessage(profile.getUsername());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void unloadProfile() {\r\n        if (loadedProfile == null) {\r\n            MessageCli.NO_PROFILE_LOADED.printMessage();\r\n        } else {\r\n            MessageCli.PROFILE_UNLOADED.printMessage(loadedProfile.getUsername());\r\n            loadedProfile = null;\r\n        }\r\n    }\r\n\r\n    public void deleteProfile(String userName) {\r\n        if (loadedProfile != null && loadedProfile.getUsername().equals(userName)) {\r\n            MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.printMessage(userName);\r\n        } else {\r\n            ClientProfile profile = findProfileByUsername(userName);\r\n            if (profile == null) {\r\n                MessageCli.NO_PROFILE_FOUND_TO_DELETE.printMessage(userName);\r\n            } else {\r\n                database.remove(profile);\r\n                MessageCli.PROFILE_DELETED.printMessage(userName);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void createPolicy(PolicyType type, String[] options) {\r\n        if (loadedProfile == null) {\r\n            MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY.printMessage();\r\n        } else {\r\n            switch (type) {\r\n                case HOME:\r\n                    createHomePolicy(options);\r\n                    break;\r\n                case CAR:\r\n                    createCarPolicy(options);\r\n                    break;\r\n                case LIFE:\r\n                    createLifePolicy(options);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void createHomePolicy(String[] options) {\r\n        // TODO: Implement this method.\r\n    }\r\n\r\n    private void createCarPolicy(String[] options) {\r\n        // TODO: Implement this method.\r\n    }\r\n\r\n    private void createLifePolicy(String[] options) {\r\n        // TODO: Implement this method.\r\n    }\r\n\r\n    private boolean isUniqueUsername(String userName) {\r\n        for (ClientProfile profile : database) {\r\n            if (profile.getUsername().equalsIgnoreCase(userName)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean isPositiveInteger(String str) {\r\n        try {\r\n            int num = Integer.parseInt(str);\r\n            return num > 0;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private String toTitleCase(String str) {\r\n        String[] words = str.split(\" \");\r\n        StringBuilder result = new StringBuilder();\r\n        for (String word : words) {\r\n            result.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1).toLowerCase()).append(\" \");\r\n        }\r\n        return result.toString().trim();\r\n    }\r\n\r\n    private ClientProfile findProfileByUsername(String userName) {\r\n        for (ClientProfile profile : database) {\r\n            if (profile.getUsername().equalsIgnoreCase(userName)) {\r\n                return profile;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```\r\nHere are the test cases that must pass:\r\n```\r\npackage nz.ac.auckland.se281;\r\n\r\nimport static nz.ac.auckland.se281.Main.Command.*;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Suite;\r\nimport org.junit.runners.Suite.SuiteClasses;\r\n\r\n@RunWith(Suite.class)\r\n@SuiteClasses({MainTest.Task1.class})\r\npublic class MainTest {\r\n\r\n  public static class Task1 extends CliTest {\r\n\r\n    public Task1() {\r\n      super(Main.class);\r\n    }\r\n\r\n    @Test\r\n    public void T1_01_empty_database() throws Exception {\r\n      runCommands(PRINT_DB);\r\n      assertContains(\"Database has 0 profiles.\");\r\n    }\r\n\r\n    @Test\r\n    public void T1_02_add_one_client() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", PRINT_DB);\r\n      assertContains(\"Database has 1 profile:\");\r\n      assertContains(\"New profile created for Jordan with age 21.\");\r\n      assertDoesNotContain(\"Database has 0 profiles\", true);\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_add_one_client_with_info() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", PRINT_DB);\r\n      assertContains(\"Database has 1 profile:\");\r\n      assertContains(\"New profile created for Jordan with age 21.\");\r\n      assertContains(\"1: Jordan, 21\");\r\n      assertDoesNotContain(\"Database has 0 profiles\", true);\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_ignore_short_name() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jo\", \"21\", PRINT_DB);\r\n      assertContains(\"Database has 0 profiles.\");\r\n      assertContains(\r\n          \"'Jo' is an invalid username, it should be at least 3 characters long. No profile was\"\r\n              + \" created.\");\r\n      assertDoesNotContain(\"Database has 1 profile\", true);\r\n      assertDoesNotContain(\"New profile created\", true);\r\n      assertDoesNotContain(\"21\");\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_ignore_short_name_to_titlecase() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"aL\", \"21\", PRINT_DB);\r\n      assertContains(\"Database has 0 profiles.\");\r\n      assertContains(\r\n          \"'Al' is an invalid username, it should be at least 3 characters long. No profile was\"\r\n              + \" created.\");\r\n      assertDoesNotContain(\"Database has 1 profile\", true);\r\n      assertDoesNotContain(\"New profile created\", true);\r\n      assertDoesNotContain(\"21\");\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_add_two_clients() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", CREATE_PROFILE, \"Tom\", \"25\", PRINT_DB);\r\n      assertContains(\"Database has 2 profiles:\");\r\n      assertContains(\"1: Jordan, 21\");\r\n      assertContains(\"2: Tom, 25\");\r\n      assertDoesNotContain(\"Database has 0 profiles\", true);\r\n      assertDoesNotContain(\"Database has 1 profile\", true);\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_add_five_clients() throws Exception {\r\n      runCommands( //\r\n          CREATE_PROFILE,\r\n          \"Jordan\",\r\n          \"21\", //\r\n          CREATE_PROFILE,\r\n          \"Jenny\",\r\n          \"22\", //\r\n          CREATE_PROFILE,\r\n          \"TOM\",\r\n          \"23\", //\r\n          CREATE_PROFILE,\r\n          \"tOmmY\",\r\n          \"24\", //\r\n          CREATE_PROFILE,\r\n          \"aLeX\",\r\n          \"25\", //\r\n          PRINT_DB);\r\n\r\n      assertContains(\"Database has 5 profiles:\");\r\n      assertContains(\"1: Jordan, 21\");\r\n      assertContains(\"2: Jenny, 22\");\r\n      assertContains(\"3: Tom, 23\");\r\n      assertContains(\"4: Tommy, 24\");\r\n      assertContains(\"5: Alex, 25\");\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_username_to_titlecase() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"jorDan\", \"21\", CREATE_PROFILE, \"TOM\", \"25\", PRINT_DB);\r\n      assertContains(\"Database has 2 profiles:\");\r\n      assertContains(\"1: Jordan, 21\");\r\n      assertContains(\"2: Tom, 25\");\r\n      assertDoesNotContain(\"jorDan\");\r\n      assertDoesNotContain(\"TOM\");\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_add_ignore_duplicate() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", CREATE_PROFILE, \"Jordan\", \"35\", PRINT_DB);\r\n      assertContains(\"Database has 1 profile:\");\r\n      assertContains(\"1: Jordan, 21\");\r\n\r\n      assertContains(\"Usernames must be unique. No profile was created for 'Jordan'.\");\r\n\r\n      assertDoesNotContain(\"Database has 0 profiles\", true);\r\n      assertDoesNotContain(\"Database has 2 profiles\", true);\r\n      assertDoesNotContain(\"Jordan, 35\", true);\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_add_ignore_duplicate_added_later() throws Exception {\r\n      runCommands(\r\n          CREATE_PROFILE,\r\n          \"tom\",\r\n          \"21\", //\r\n          CREATE_PROFILE,\r\n          \"jordan\",\r\n          \"25\", //\r\n          CREATE_PROFILE,\r\n          \"Jenny\",\r\n          \"23\", //\r\n          CREATE_PROFILE,\r\n          \"TOM\",\r\n          \"32\", //\r\n          PRINT_DB);\r\n      assertContains(\"Database has 3 profiles:\");\r\n      assertContains(\"1: Tom, 21\");\r\n      assertContains(\"2: Jordan, 25\");\r\n      assertContains(\"3: Jenny, 23\");\r\n\r\n      assertContains(\"Usernames must be unique. No profile was created for 'Tom'.\");\r\n\r\n      assertDoesNotContain(\"Database has 4 profiles\", true);\r\n      assertDoesNotContain(\"Tom, 32\", true);\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_ignore_invalid_age_negative() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jordan\", \"-1\", PRINT_DB);\r\n      assertContains(\"Database has 0 profiles.\");\r\n      assertContains(\r\n          \"'-1' is an invalid age, please provide a positive whole number only. No profile was\"\r\n              + \" created for Jordan.\");\r\n      assertDoesNotContain(\"Database has 1 profile\", true);\r\n      assertDoesNotContain(\"Jordan, -1\", true);\r\n      assertDoesNotContain(\"New profile created\", true);\r\n    }\r\n\r\n    @Test\r\n    public void T1_xx_add_success_after_invalid_age() throws Exception {\r\n      runCommands(CREATE_PROFILE, \"Jordan\", \"-1\", CREATE_PROFILE, \"Jordan\", \"20\", PRINT_DB);\r\n      assertContains(\r\n          \"'-1' is an invalid age, please provide a positive whole number only. No profile was\"\r\n              + \" created for Jordan.\");\r\n      assertContains(\"Database has 1 profile:\");\r\n      assertContains(\"1: Jordan, 20\");\r\n      assertDoesNotContain(\"Database has 0 profiles\", true);\r\n      assertDoesNotContain(\"Jordan, -1\", true);\r\n    }\r\n  }\r\n}\r\n```"
    }
  ],
  "temperature": "0.7"
}
