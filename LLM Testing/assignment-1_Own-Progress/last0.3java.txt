package nz.ac.auckland.se281;

import nz.ac.auckland.se281.Main.PolicyType;

public class InsuranceSystem {
    private Profile[] profiles;
    private Profile loadedProfile;

    public InsuranceSystem() {
        profiles = new Profile[0];
        loadedProfile = null;
    }

    public void printDatabase() {
        if (profiles.length == 0) {
            MessageCli.PRINT_DB_POLICY_COUNT.printMessage("0", "s", ".");
        } else if (profiles.length == 1) {
            MessageCli.PRINT_DB_POLICY_COUNT.printMessage("1", "", ":");
            MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.printMessage("1", profiles[0].getUsername(), profiles[0].getAge());
        } else {
            MessageCli.PRINT_DB_POLICY_COUNT.printMessage(String.valueOf(profiles.length), "s", ":");
            for (int i = 0; i < profiles.length; i++) {
                MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.printMessage(String.valueOf(i + 1), profiles[i].getUsername(), profiles[i].getAge());
            }
        }
    }

    public void createNewProfile(String userName, String age) {
        if (userName.length() < 3) {
            MessageCli.INVALID_USERNAME_TOO_SHORT.printMessage(userName);
            return;
        }

        for (Profile profile : profiles) {
            if (profile.getUsername().equalsIgnoreCase(userName)) {
                MessageCli.INVALID_USERNAME_NOT_UNIQUE.printMessage(userName);
                return;
            }
        }

        int ageInt;
        try {
            ageInt = Integer.parseInt(age);
        } catch (NumberFormatException e) {
            MessageCli.INVALID_AGE.printMessage(age, userName);
            return;
        }

        if (ageInt <= 0) {
            MessageCli.INVALID_AGE.printMessage(age, userName);
            return;
        }

        Profile newProfile = new Profile(userName, ageInt);
        Profile[] newProfiles = new Profile[profiles.length + 1];
        System.arraycopy(profiles, 0, newProfiles, 0, profiles.length);
        newProfiles[profiles.length] = newProfile;
        profiles = newProfiles;

        MessageCli.PROFILE_CREATED.printMessage(userName, age);
    }

    public void loadProfile(String userName) {
        if (loadedProfile != null) {
            MessageCli.CANNOT_CREATE_WHILE_LOADED.printMessage(loadedProfile.getUsername());
            return;
        }

        for (Profile profile : profiles) {
            if (profile.getUsername().equalsIgnoreCase(userName)) {
                loadedProfile = profile;
                MessageCli.PROFILE_LOADED.printMessage(userName);
                return;
            }
        }

        MessageCli.NO_PROFILE_FOUND_TO_LOAD.printMessage(userName);
    }

    public void unloadProfile() {
        if (loadedProfile == null) {
            MessageCli.NO_PROFILE_LOADED.printMessage();
        } else {
            loadedProfile = null;
            MessageCli.PROFILE_UNLOADED.printMessage(loadedProfile.getUsername());
        }
    }

    public void deleteProfile(String userName) {
        if (loadedProfile != null && loadedProfile.getUsername().equalsIgnoreCase(userName)) {
            MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.printMessage(userName);
            return;
        }

        for (int i = 0; i < profiles.length; i++) {
            if (profiles[i].getUsername().equalsIgnoreCase(userName)) {
                Profile[] newProfiles = new Profile[profiles.length - 1];
                System.arraycopy(profiles, 0, newProfiles, 0, i);
                System.arraycopy(profiles, i + 1, newProfiles, i, profiles.length - i - 1);
                profiles = newProfiles;

                MessageCli.PROFILE_DELETED.printMessage(userName);
                return;
            }
        }

        MessageCli.NO_PROFILE_FOUND_TO_DELETE.printMessage(userName);
    }

    public void createPolicy(PolicyType type, String[] options) {
        if (loadedProfile == null) {
            MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY.printMessage();
            return;
        }

        switch (type) {
            case HOME:
                if (loadedProfile.getHomePolicy() != null) {
                    MessageCli.ALREADY_HAS_LIFE_POLICY.printMessage(loadedProfile.getUsername());
                    return;
                }

                int sumInsuredHome;
                try {
                    sumInsuredHome = Integer.parseInt(options[0]);
                } catch (NumberFormatException e) {
                    MessageCli.INVALID_AGE.printMessage(options[0], loadedProfile.getUsername());
                    return;
                }

                boolean isRental = options[1].equalsIgnoreCase("y");

                HomePolicy homePolicy = new HomePolicy(sumInsuredHome, isRental);
                loadedProfile.setHomePolicy(homePolicy);

                MessageCli.NEW_POLICY_CREATED.printMessage("home", loadedProfile.getUsername());
                break;

            case CAR:
                if (loadedProfile.getCarPolicy() != null) {
                    MessageCli.ALREADY_HAS_LIFE_POLICY.printMessage(loadedProfile.getUsername());
                    return;
                }

                int sumInsuredCar;
                try {
                    sumInsuredCar = Integer.parseInt(options[0]);
                } catch (NumberFormatException e) {
                    MessageCli.INVALID_AGE.printMessage(options[0], loadedProfile.getUsername());
                    return;
                }

                String makeAndModel = options[1];
                String licensePlate = options[2];
                boolean hasMechanicalWarranty = options[3].equalsIgnoreCase("y");

                CarPolicy carPolicy = new CarPolicy(sumInsuredCar, makeAndModel, licensePlate, hasMechanicalWarranty);
                loadedProfile.setCarPolicy(carPolicy);

                MessageCli.NEW_POLICY_CREATED.printMessage("car", loadedProfile.getUsername());
                break;

            case LIFE:
                if (loadedProfile.getLifePolicy() != null) {
                    MessageCli.ALREADY_HAS_LIFE_POLICY.printMessage(loadedProfile.getUsername());
                    return;
                }

                int sumInsuredLife;
                try {
                    sumInsuredLife = Integer.parseInt(options[0]);
                } catch (NumberFormatException e) {
                    MessageCli.INVALID_AGE.printMessage(options[0], loadedProfile.getUsername());
                    return;
                }

                LifePolicy lifePolicy = new LifePolicy(sumInsuredLife);
                loadedProfile.setLifePolicy(lifePolicy);

                MessageCli.NEW_POLICY_CREATED.printMessage("life", loadedProfile.getUsername());
                break;
        }
    }
}