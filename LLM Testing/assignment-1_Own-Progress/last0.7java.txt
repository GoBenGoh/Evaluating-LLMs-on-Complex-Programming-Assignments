package nz.ac.auckland.se281;

import nz.ac.auckland.se281.Main.PolicyType;

import java.util.ArrayList;
import java.util.List;

public class InsuranceSystem {
    // Create a list to store profiles
    private List<Profile> profiles;

    public InsuranceSystem() {
        profiles = new ArrayList<>();
    }

    public void printDatabase() {
        if (profiles.isEmpty()) {
            System.out.println("Database has 0 profiles.");
            return;
        }

        System.out.printf("Database has %d profile%s%s%n", profiles.size(),
                profiles.size() == 1 ? "" : "s", profiles.size() == 1 ? ":" : "s");
        for (int i = 0; i < profiles.size(); i++) {
            Profile profile = profiles.get(i);
            System.out.printf("%d: %s, %d%n", i + 1, profile.getUsername(), profile.getAge());
        }
    }

    public void createNewProfile(String userName, String age) {
        if (userName.length() < 3) {
            System.out.printf("'%s' is an invalid username, it should be at least 3 characters long. No profile was created.%n", userName);
            return;
        }

        int ageValue;
        try {
            ageValue = Integer.parseInt(age);
        } catch (NumberFormatException e) {
            System.out.printf("'%s' is an invalid age, please provide a positive whole number only. No profile was created for %s.%n", age, userName);
            return;
        }

        if (ageValue <= 0) {
            System.out.printf("'%s' is an invalid age, please provide a positive whole number only. No profile was created for %s.%n", age, userName);
            return;
        }

        // Convert the username to title case
        String formattedUserName = toTitleCase(userName);

        // Check if the username already exists
        for (Profile profile : profiles) {
            if (formattedUserName.equals(profile.getUsername())) {
                System.out.printf("Usernames must be unique. No profile was created for '%s'.%n", formattedUserName);
                return;
            }
        }

        // Create a new profile and add it to the list
        Profile newProfile = new Profile(formattedUserName, ageValue);
        profiles.add(newProfile);

        System.out.printf("New profile created for %s with age %d.%n", formattedUserName, ageValue);
    }

    public void loadProfile(String userName) {
        // Convert the username to title case
        String formattedUserName = toTitleCase(userName);

        // Search for the profile with the matching username
        for (Profile profile : profiles) {
            if (formattedUserName.equals(profile.getUsername())) {
                profile.setLoaded(true);
                System.out.printf("Profile loaded for %s.%n", formattedUserName);
                return;
            }
        }

        // Profile not found
        System.out.printf("No profile found for %s. Profile not loaded.%n", formattedUserName);
    }

    public void unloadProfile() {
        // Search for the loaded profile
        for (Profile profile : profiles) {
            if (profile.isLoaded()) {
                profile.setLoaded(false);
                System.out.printf("Profile unloaded for %s.%n", profile.getUsername());
                return;
            }
        }

        // No profile loaded
        System.out.println("No profile is currently loaded.");
    }

    public void deleteProfile(String userName) {
        // Convert the username to title case
        String formattedUserName = toTitleCase(userName);

        // Search for the profile with the matching username
        for (int i = 0; i < profiles.size(); i++) {
            Profile profile = profiles.get(i);
            if (formattedUserName.equals(profile.getUsername())) {
                // Check if the profile is loaded
                if (profile.isLoaded()) {
                    System.out.printf("Cannot delete profile for %s while loaded. No profile was deleted.%n", formattedUserName);
                    return;
                }

                profiles.remove(i);
                System.out.printf("Profile deleted for %s.%n", formattedUserName);
                return;
            }
        }

        // Profile not found
        System.out.printf("No profile found for %s. No profile was deleted.%n", formattedUserName);
    }

    public void createPolicy(PolicyType type, String[] options) {
        // Check if a profile is loaded
        Profile loadedProfile = null;
        for (Profile profile : profiles) {
            if (profile.isLoaded()) {
                loadedProfile = profile;
                break;
            }
        }

        if (loadedProfile == null) {
            System.out.println("Need to load a profile in order to create a policy.");
            return;
        }

        switch (type) {
            case HOME:
                // TODO: Implement home policy creation
                break;
            case CAR:
                // TODO: Implement car policy creation
                break;
            case LIFE:
                // Check if the profile already has a life policy
                if (loadedProfile.hasLifePolicy()) {
                    System.out.printf("%s already has a life policy. No new policy was created.%n", loadedProfile.getUsername());
                    return;
                }

                // Create a new life policy
                double sumInsured = Double.parseDouble(options[0]);
                double premium = calculateLifePolicyPremium(sumInsured);
                LifePolicy lifePolicy = new LifePolicy(sumInsured, premium);

                // Add the life policy to the loaded profile
                loadedProfile.addLifePolicy(lifePolicy);

                System.out.printf("New life policy created for %s.%n", loadedProfile.getUsername());
                break;
        }
    }

    private String toTitleCase(String input) {
        String[] words = input.split(" ");
        StringBuilder titleCase = new StringBuilder();

        for (String word : words) {
            titleCase.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1).toLowerCase()).append(" ");
        }

        return titleCase.toString().trim();
    }

    private double calculateLifePolicyPremium(double sumInsured) {
        // TODO: Implement premium calculation for life policy
        return 0.0;
    }
}