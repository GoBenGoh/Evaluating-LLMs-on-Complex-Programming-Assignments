package nz.ac.auckland.se281;

import java.util.ArrayList;
import java.util.List;

public class InsuranceSystem {
    private List<Profile> profiles;
    private Profile loadedProfile;

    public InsuranceSystem() {
        profiles = new ArrayList<>();
        loadedProfile = null;
    }

    public void printDatabase() {
        System.out.println(MessageCli.PRINT_DB_POLICY_COUNT.getMessage(profiles.size() + "", profiles.size() > 1 ? "s" : ""));
        int index = 1;
        for (Profile profile : profiles) {
            boolean isLoaded = loadedProfile != null && profile.getUsername().equalsIgnoreCase(loadedProfile.getUsername());
            String prefix = isLoaded ? "*** " : " ";
            System.out.println(MessageCli.PRINT_DB_PROFILE_HEADER_SHORT.getMessage(prefix, index + "", profile.getUsername(), profile.getAge() + ""));
            index++;
        }
    }

    public void createNewProfile(String userName, String age) {
        if (loadedProfile != null) {
            System.out.println(MessageCli.CANNOT_CREATE_WHILE_LOADED.getMessage(loadedProfile.getUsername()));
            return;
        }

        String formattedUserName = toTitleCase(userName);
        int parsedAge = parseAge(age);
        if (parsedAge < 0) {
            System.out.println(MessageCli.INVALID_AGE.getMessage(age, formattedUserName));
            return;
        }

        if (isUserNameExists(formattedUserName)) {
            System.out.println(MessageCli.INVALID_USERNAME_NOT_UNIQUE.getMessage(formattedUserName));
            return;
        }

        if (formattedUserName.length() < 3) {
            System.out.println(MessageCli.INVALID_USERNAME_TOO_SHORT.getMessage(formattedUserName));
            return;
        }

        Profile newProfile = new Profile(formattedUserName, parsedAge);
        profiles.add(newProfile);
        System.out.println(MessageCli.PROFILE_CREATED.getMessage(formattedUserName, parsedAge + ""));
    }

    public void loadProfile(String userName) {
        String formattedUserName = toTitleCase(userName);
        Profile profile = findProfile(formattedUserName);
        if (profile != null) {
            loadedProfile = profile;
            System.out.println(MessageCli.PROFILE_LOADED.getMessage(formattedUserName));
        } else {
            System.out.println(MessageCli.NO_PROFILE_FOUND_TO_LOAD.getMessage(formattedUserName));
        }
    }

    public void unloadProfile() {
        if (loadedProfile != null) {
            System.out.println(MessageCli.PROFILE_UNLOADED.getMessage(loadedProfile.getUsername()));
            loadedProfile = null;
        } else {
            System.out.println(MessageCli.NO_PROFILE_LOADED.getMessage());
        }
    }

    public void deleteProfile(String userName) {
        String formattedUserName = toTitleCase(userName);
        Profile profile = findProfile(formattedUserName);
        if (profile != null) {
            if (loadedProfile != null && loadedProfile.getUsername().equalsIgnoreCase(formattedUserName)) {
                System.out.println(MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.getMessage(formattedUserName));
                return;
            }

            profiles.remove(profile);
            System.out.println(MessageCli.PROFILE_DELETED.getMessage(formattedUserName));
        } else {
            System.out.println(MessageCli.NO_PROFILE_FOUND_TO_DELETE.getMessage(formattedUserName));
        }
    }

    public void createPolicy(Main.PolicyType type, String[] options) {
        if (loadedProfile == null) {
            System.out.println(MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY.getMessage());
            return;
        }

        switch (type) {
            case HOME:
                createHomePolicy(options);
                break;
            case CAR:
                createCarPolicy(options);
                break;
            case LIFE:
                createLifePolicy(options);
                break;
        }
    }

    private void createHomePolicy(String[] options) {
        int sumToInsure = Integer.parseInt(options[0]);
        String propertyAddress = options[1];
        boolean isRental = options[2].equalsIgnoreCase("y");

        Policy homePolicy = new HomePolicy(sumToInsure, propertyAddress, isRental);
        loadedProfile.addPolicy(homePolicy);
        System.out.println(MessageCli.NEW_POLICY_CREATED.getMessage("home", loadedProfile.getUsername()));
    }

    private void createCarPolicy(String[] options) {
        int sumToInsure = Integer.parseInt(options[0]);
        String makeAndModel = options[1];
        String licensePlate = options[2];
        boolean hasMechanicalWarranty = options[3].equalsIgnoreCase("y");

        Policy carPolicy = new CarPolicy(sumToInsure, makeAndModel, licensePlate, hasMechanicalWarranty);
        loadedProfile.addPolicy(carPolicy);
        System.out.println(MessageCli.NEW_POLICY_CREATED.getMessage("car", loadedProfile.getUsername()));
    }

    private void createLifePolicy(String[] options) {
        int sumToInsure = Integer.parseInt(options[0]);

        Policy lifePolicy = new LifePolicy(sumToInsure);
        loadedProfile.addPolicy(lifePolicy);
        System.out.println(MessageCli.NEW_POLICY_CREATED.getMessage("life", loadedProfile.getUsername()));
    }

    private String toTitleCase(String str) {
        String[] words = str.toLowerCase().split(" ");
        StringBuilder titleCase = new StringBuilder();
        for (String word : words) {
            titleCase.append(word.substring(0, 1).toUpperCase()).append(word.substring(1)).append(" ");
        }
        return titleCase.toString().trim();
    }

    private int parseAge(String age) {
        try {
            return Integer.parseInt(age);
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    private boolean isUserNameExists(String userName) {
        for (Profile profile : profiles) {
            if (profile.getUsername().equalsIgnoreCase(userName)) {
                return true;
            }
        }
        return false;
    }

    private Profile findProfile(String userName) {
        for (Profile profile : profiles) {
            if (profile.getUsername().equalsIgnoreCase(userName)) {
                return profile;
            }
        }
        return null;
    }
}

class Profile {
    private String username;
    private int age;
    private List<Policy> policies;

    public Profile(String username, int age) {
        this.username = username;
        this.age = age;
        policies = new ArrayList<>();
    }

    public String getUsername() {
        return username;
    }

    public int getAge() {
        return age;
    }

    public void addPolicy(Policy policy) {
        policies.add(policy);
    }
}

abstract class Policy {
    protected int sumToInsure;

    public Policy(int sumToInsure) {
        this.sumToInsure = sumToInsure;
    }

    public abstract double calculatePremium();

    public int getSumToInsure() {
        return sumToInsure;
    }
}

class HomePolicy extends Policy {
    private String propertyAddress;
    private boolean isRental;

    public HomePolicy(int sumToInsure, String propertyAddress, boolean isRental) {
        super(sumToInsure);
        this.propertyAddress = propertyAddress;
        this.isRental = isRental;
    }

    @Override
    public double calculatePremium() {
        double premium = sumToInsure * 0.02;
        if (isRental) {
            premium *= 0.9;
        }
        return premium;
    }

    @Override
    public String toString() {
        return "Home Policy (" +
                propertyAddress +
                ", Sum Insured: $" + sumToInsure +
                ", Premium: $" + calculatePremium() +
                ")";
    }
}

class CarPolicy extends Policy {
    private String makeAndModel;
    private String licensePlate;
    private boolean hasMechanicalWarranty;

    public CarPolicy(int sumToInsure, String makeAndModel, String licensePlate, boolean hasMechanicalWarranty) {
        super(sumToInsure);
        this.makeAndModel = makeAndModel;
        this.licensePlate = licensePlate;
        this.hasMechanicalWarranty = hasMechanicalWarranty;
    }

    @Override
    public double calculatePremium() {
        double premium = sumToInsure * 0.1;
        if (hasMechanicalWarranty) {
            premium *= 0.9;
        }
        return premium;
    }

    @Override
    public String toString() {
        return "Car Policy (" +
                makeAndModel +
                ", Sum Insured: $" + sumToInsure +
                ", Premium: $" + calculatePremium() +
                ")";
    }
}

class LifePolicy extends Policy {
    public LifePolicy(int sumToInsure) {
        super(sumToInsure);
    }

    @Override
    public double calculatePremium() {
        return sumToInsure * 0.015;
    }

    @Override
    public String toString() {
        return "Life Policy (Sum Insured: $" + sumToInsure +
                ", Premium: $" + calculatePremium() +
                ")";
    }
}
