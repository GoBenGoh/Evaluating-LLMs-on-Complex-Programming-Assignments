```package nz.ac.auckland.se281;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class InsuranceSystem {
    private Set<String> usernames;
    private List<ClientProfile> database;

    public InsuranceSystem() {
        usernames = new HashSet<>();
        database = new ArrayList<>();
    }

    public void printDatabase() {
        int count = database.size();

        if (count == 0) {
            MessageCli.PRINT_DB_POLICY_COUNT.printMessage("0", "s", ".");
        } else if (count == 1) {
            MessageCli.PRINT_DB_POLICY_COUNT.printMessage("1", "", ":");
            System.out.println(" 1: " + getFormattedProfile(database.get(0)));
        } else {
            MessageCli.PRINT_DB_POLICY_COUNT.printMessage(String.valueOf(count), "s", ":");
            for (int i = 0; i < count; i++) {
                System.out.println(" " + (i + 1) + ": " + getFormattedProfile(database.get(i)));
            }
        }
    }

    public void createNewProfile(String userName, String age) {
        userName = toTitleCase(userName);

        // Check if username is unique
        if (!isUniqueUsername(userName)) {
            MessageCli.INVALID_USERNAME_NOT_UNIQUE.printMessage(userName);
            return;
        }

        // Check if username is at least 3 characters long
        if (userName.length() < 3) {
            MessageCli.INVALID_USERNAME_TOO_SHORT.printMessage(userName);
            return;
        }

        // Check if age is a positive integer
        int ageValue;
        try {
            ageValue = Integer.parseInt(age);
            if (ageValue <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            MessageCli.INVALID_AGE.printMessage(age, userName);
            return;
        }

        // Create new profile
        ClientProfile profile = new ClientProfile(userName, ageValue, database.size() + 1);
        database.add(profile);

        // Print success message
        MessageCli.PROFILE_CREATED.printMessage(userName, age);
    }

    public void loadProfile(String userName) {
        userName = toTitleCase(userName);

        // Check if profile already loaded
        if (isProfileLoaded(userName)) {
            MessageCli.PROFILE_LOADED.printMessage(userName);
            return;
        }

        // Find profile in the database
        ClientProfile profile = findProfile(userName);

        // Check if profile exists
        if (profile == null) {
            MessageCli.NO_PROFILE_FOUND_TO_LOAD.printMessage(userName);
            return;
        }

        // Load profile
        profile.setLoaded(true);

        // Print success message
        MessageCli.PROFILE_LOADED.printMessage(userName);
    }

    public void unloadProfile() {
        // Find loaded profile
        ClientProfile profile = findLoadedProfile();

        // Check if profile is loaded
        if (profile == null) {
            MessageCli.NO_PROFILE_LOADED.printMessage();
            return;
        }

        // Unload profile
        profile.setLoaded(false);

        // Print success message
        MessageCli.PROFILE_UNLOADED.printMessage(profile.getUserName());
    }

    public void deleteProfile(String userName) {
        userName = toTitleCase(userName);

        // Find profile in the database
        ClientProfile profile = findProfile(userName);

        // Check if profile exists
        if (profile == null) {
            MessageCli.NO_PROFILE_FOUND_TO_DELETE.printMessage(userName);
            return;
        }

        // Check if profile is loaded
        if (profile.isLoaded()) {
            MessageCli.CANNOT_DELETE_PROFILE_WHILE_LOADED.printMessage(userName);
            return;
        }

        // Remove profile from the database
        database.remove(profile);

        // Print success message
        MessageCli.PROFILE_DELETED.printMessage(userName);
    }

    public void createPolicy(Main.PolicyType type, String[] options) {
        // Find loaded profile
        ClientProfile profile = findLoadedProfile();

        // Check if profile is loaded
        if (profile == null) {
            MessageCli.NO_PROFILE_FOUND_TO_CREATE_POLICY.printMessage();
            return;
        }

        // Check if profile already has a life policy
        if (type == Main.PolicyType.LIFE && profile.hasLifePolicy()) {
            MessageCli.ALREADY_HAS_LIFE_POLICY.printMessage(profile.getUserName());
            return;
        }

        // Check if profile is over age limit for life policy
        if (type == Main.PolicyType.LIFE && profile.getAge() > 60) {
            MessageCli.OVER_AGE_LIMIT_LIFE_POLICY.printMessage(profile.getUserName());
            return;
        }

        // Create policy
        Policy policy;
        switch (type) {
            case HOME:
                policy = new HomePolicy(options[0], options[1], options[2].equalsIgnoreCase("y"));
                break;
            case CAR:
                policy = new CarPolicy(options[0], options[1], options[2],
                        options[3].equalsIgnoreCase("y"));
                break;
            case LIFE:
                policy = new LifePolicy(options[0], options[1]);
                break;
            default:
                return;
        }

        // Add policy to profile
        profile.addPolicy(policy);

        // Print success message
        MessageCli.NEW_POLICY_CREATED.printMessage(policy.getType().name(), profile.getUserName());
    }

    private boolean isUniqueUsername(String userName) {
        return usernames.add(userName);
    }

    private boolean isProfileLoaded(String userName) {
        ClientProfile profile = findProfile(userName);
        return (profile != null && profile.isLoaded());
    }

    private ClientProfile findProfile(String userName) {
        for (ClientProfile profile : database) {
            if (profile.getUserName().equals(userName)) {
                return profile;
            }
        }
        return null;
    }

    private ClientProfile findLoadedProfile() {
        for (ClientProfile profile : database) {
            if (profile.isLoaded()) {
                return profile;
            }
        }
        return null;
    }

    private String toTitleCase(String userName) {
        String[] words = userName.split(" ");
        StringBuilder result = new StringBuilder();
        for (String word : words) {
            if (word.length() > 1) {
                result.append(Character.toUpperCase(word.charAt(0)))
                        .append(word.substring(1).toLowerCase());
            } else {
                result.append(word.toUpperCase());
            }
            result.append(" ");
        }
        return result.toString().trim();
    }

    private String getFormattedProfile(ClientProfile profile) {
        return MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL.getMessage(
                String.valueOf(profile.getIndex()),
                profile.getUserName(),
                String.valueOf(profile.getAge())
        );
    }
}
```
