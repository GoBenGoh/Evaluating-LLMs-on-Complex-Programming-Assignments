{
  "model": "gpt-3.5-turbo-16k",
  "messages": [{"role": "user", "content":"Please code all the Java classes necessary for the following assignment brief and tasks so that all provided test cases pass. The assignment brief will be between a pair of \"///\".\n///\nThe Insurance System\nInsurance systems can be complex. In this assignment, you will be asked to design and implement a simple insurance system. The system will be able to store information about clients and their policies.\n\nThe system you develop is one that the insurance company will use to manage their clients and policies. The system will be used by the insurance company’s staff to:\n\nAdd new clients,\nDelete existing clients,\nAdd new policies for existing clients,\nCalculate the cost of premiums for any given policy,\nCalculate the total cost of premiums for all policies for a client,\nApplying discounts for clients who have multiple policies.\nDue to the insurance company’s limited budget (it’s apparently tough being an insurance company), we will only design for them a terminal-driven interface. This means that the system will be controlled by a menu system that will be displayed on the terminal. The menu will allow the staff member to select from a list of commands. The staff member will be able to select a command by typing its code, and any arguments it expects. Some commands require additional options, which are prompted by the system one at a time. The system will then execute the appropriate action.\n\nThe menu of commands will be displayed on the terminal as follows:\n\nPRINT_DB        [no args]       Print the entire insurance database\nCREATE_PROFILE  [2 arguments]   Create a new client profile <USERNAME> <AGE>\nLOAD_PROFILE    [1 arguments]   Load the specified profile <USERNAME>\nUNLOAD_PROFILE  [no args]       Unload the currently-loaded profile\nDELETE_PROFILE  [1 arguments]   Delete the specified profile <USERNAME> from the database\nPOLICY_HOME     [no args]       Create a new home policy for the currently-loaded profile\nPOLICY_CAR      [no args]       Create a new car policy for the currently-loaded profile\nPOLICY_LIFE     [no args]       Create a new life policy for the currently-loaded profile\nHELP            [no args]       Print usage\nEXIT            [no args]       Exit the application\nYou have been given an incomplete implementation of the system, with only the command line interface implemented. You need to implement the commands using Object-Oriented Programming!\n\nProvided Files\n\nMain.java:\nThis class implements the command line interface (CLI).\nYou should not modify this class.\n\nMessageCli.java:\nThis class declares most of the messages of the system.\n\nYou should not modify this class, but you are encouraged to use it.\n\nYou are encouraged to refer to these messages in the code you write, as it will be easier for you to avoid spelling and formatting issues that might otherwise cause you to fail test cases.\n\nThere are two ways to use these messages in your code:\n\nGet the message so that you can print it yourself by calling the getMessage() method, or\nRequest for the message to be printed directly by calling the printMessage() method.\nYou will notice that most of the messages have %s placeholders in their values. For example, have a look at the definition of the PROFILE_CREATED message:\n\npublic enum MessageCli {\n  // ...\n   PROFILE_CREATED(\"New profile created for %s with age %s.\")\n  // ...\n}\nThere are two %s placeholders, which means this message expects you to pass two arguments when you want to getMessage() or printMessage() it.\n\nFor example, consider you want to construct the message \"New profile created for Jenny with age 25.\"\n\nIf you want to get the message to print it yourself, you would do:\n\nString message = MessageCli.PROFILE_CREATED.getMessage(\"Jenny\", \"25\");  // get the message\nSystem.out.println(message);  // print it yourself\nBut, of course, it will often be easier to just print the message directly:\n\nMessageCli.PROFILE_CREATED.printMessage(\"Jenny\", \"25\");  // print the message directly\nBe sure to dedicate time to understand how this works, as it will be very useful to use and make your job easier. You should already be familiar with this concept from how printf() works in C.\n\nInsuranceSystem.java:\nThis class declares the methods that are invoked by the command line interface (Main.java). This is where you need to start your coding.\n\nYou must NOT change the signature of the existing methods of this class (such as changing method names, parameters, and return types).\n\nOf course, you can (and you should) add instance fields and new methods of your own.\n\nIf you need to instantiate/initialise fields of the InsuranceSystem instance, you can only use the provided zero-parameter constructor (public InsuranceSystem()). You should not create other constructors in the InsuranceSystem class, as they will not be used by the command line or test cases.\n\nCheckpoints:\n\nCheckpoint #1\nThis checkpoint is about applying basic Java OOP concepts, such as:\nUsing collections\nUsing loops\nUsing classes\n\nCheckpoint #2\nThis checkpoint is about applying slightly more advanced OOP concepts:\nUsing inheritance\nUsing polymorphism\nUsing abstract classes\n\nOOP Requirements\nFor this assignment, you should use the OOP concepts we covered in class. As such, you should not implement all your code inside InsuranceSystem.java. You should create appropriate classes. We are giving you complete freedom on how to do the OO design. You will decide how many and which Java classes to create.\n\nInheritance (Checkpoint #2)\nYou should make sure that you are using inheritance for Checkpoint #2. There, we will check for the following:\n\nYour code should have at least one abstract class, and\nYour code should have at least three (sub)classes that extend class(es) that you have created.\n///\n\nThe following section marked between a pair of \"***\" are the tasks for this assignment.\n***\nTasks\nTo guide you through the assignment, we have divided it into three tasks. Task 1 corresponds to Checkpoint #1, while Task 2 and Task 3 together correspond to Checkpoint #2.\n\nTask 1 (Checkpoint #1):\nCreating a new client profile (CREATE_PROFILE and PRINT_DB)\nTask 1 will require you to implement (some of) the logic for the CREATE_PROFILE and PRINT_DB commands.\n\nThe CREATE_PROFILE command creates a new client profile with the specified username and age (passed as arguments to the CREATE_PROFILE command). The username should be unique across all other usernames currently in the system, and the age should be a positive integer. If the username is not unique, or the age is not a positive integer, an error message should be printed.\n\nThe PRINT_DB command prints the entire insurance database. If the database is empty, it prints the following:\n\nDatabase has 0 profiles.\nIf the database has exactly one profile, it prints the following:\n\nDatabase has 1 profile:\n 1: Jordan, 21\nIf the database has more than one profile, it prints the following:\n\nDatabase has 2 profiles:\n 1: Jordan, 21\n 2: John, 22\nTake note of the differences between the 3 cases above:\n\nIn the first example, “profiles” is plural, and the sentence ends with a period (“.”)\nIn the second example, “profile” is singular, and the sentence ends with a colon (“:”)\nIn the third example, “profiles” is plural, and the sentence ends with a colon (“:”)\nHint: Have a look at the MessageCli.PRINT_DB_POLICY_COUNT message template:\n\nPRINT_DB_POLICY_COUNT(\"Database has %s profile%s%s\")\nThis message template has three %s placeholders:\n\nThe first %s is for the number of profiles (e.g., “0”, “1”, “2”, etc.)\nThe second %s is for the word “profile”, whether you want it to be singular or plural (i.e., “profile” or “profiles”)\nThe third %s is for ending the sentence (i.e., “.” or “:”)\nTo get the messahe \"Database has 2 profiles:\", you can do one of the following:\n\nMessageCli.PRINT_DB_POLICY_COUNT.getMessage(\"2\", \"s\", \":\");    // Using the getMessage() method\nMessageCli.PRINT_DB_POLICY_COUNT.printMessage(\"2\", \"s\", \":\");  // Using the printMessage() method\n\nIn addition to above header, if there is at least one profile in the database, the PRINT_DB should also print the following for every profile in the database:\n\n<SPACE><RANK><COLON><SPACE><USERNAME><COMMA><SPACE><AGE>\nFor example, for the database with two profiles:\n\nDatabase has 2 profiles:\n 1: Jordan, 21\n 2: Jenny, 25\n\nHint: The <RANK> is the position of the profile in the database, in the order they were added successfully into the system, starting from 1. This is not an “ID” of the profile (so, you should not be trying to implement this using static variables).\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_MINIMAL message template.\n\nWhen a new profile is created, it should be added to the database. The arguments have the following requirements:\n\n<USERNAME> (✭)\nMust be unique across all other usernames currently in the system\nMust be at least 3 characters long\nThe username will only be a single word (✱)\nThe user may type the username using any case, but your system needs to always process it in title case (i.e., the first letter of each word is capitalised, with the rest of the letters being lowercase)\n<AGE> (✭)\nShould be a positive integer\n✱ You do not need to worry about the user typing in a username that is more than one word. For example, you do not need to worry about the user typing in CREATE_PROFILE John Smith 21. You can assume that the user will always type in a username that is a single word.\n\n✭ You do not need to worry about test cases where there are multiple errors in the same command. For example, you do not need to worry about the user typing in CREATE_PROFILE Jo twenty (i.e., the username is too short, and the age is not a positive integer). You can assume that the user will always type in a command that has only one error.\n\nWhen a successful profile is created, a success message should be printed.\n\nNew profile created for <USERNAME> with age <AGE>.\nFor example:\n\ninsurance system> create-profile joRDaN 21\nNew profile created for Jordan with age 21.  // success message\nTake note of how the system printed the name as “Jordan” (i.e., in title case), even though the user typed “joRDaN” (i.e., in weird case).\n\nThe format of this message is very strict. Make sure you check for an appropriate message template in MessageCli to help you.\n\nIf there was something wrong with the username, then the above success message should not be printed. Instead, one of the following messages gets printed.\n\nIf the username is too short, then the following message gets printed:\n\n'<USERNAME>' is an invalid username, it should be at least 3 characters long. No profile was created.\nConsider the following example, paying attention to how the user types the username versus how the system prints it:\n\ninsurance system> create-profile jo 21\n'Jo' is an invalid username, it should be at least 3 characters long. No profile was created.\nThe system printed the name as “Jo” (i.e., in title case), even though the user typed “jo”.\n\nIf the username already exists, then the following message gets printed:\n\nUsernames must be unique. No profile was created for '<USERNAME>'.\nConsider the following example, paying attention to how the user types the username versus how the system prints it:\n\ninsurance system> create-profile jordan 21  // first time adding a Jordan, so this is successful\nNew profile created for Jordan with age 21.\ninsurance system> create-profile jorDan 35  // second time adding a Jordan, so this is unsuccessful\nUsernames must be unique. No profile was created for 'Jordan'.\nIf the age is not a positive integer, then following message gets printed:\n\n'<AGE>' is an invalid age, please provide a positive whole number only. No profile was created for <USERNAME>.\nAgain, remember that the system will always print the username in title case, regardless of how the user types it.\n\nTask 2 (Checkpoint #2):\nLoading Profiles\nThe LOAD_PROFILE command loads a profile into the system. This command requires exactly one argument, representing the username to be loaded. Again, the user might type the username in any case, but the system will always process it in title case.\n\nA success message occurs when the profile is found and successfully loaded:\n\nProfile loaded for <USERNAME>.\nIf the profile is not found, then the following message gets printed:\n\nNo profile found for <USERNAME>. Profile not loaded.\nWhen a profile is successfully loaded, the PRINT_DB command should print an extra *** in front of the currently-loaded profile. For example, if the database has three profiles, and the second profile is successfully loaded, then the PRINT_DB command should print the following:\n\nDatabase has 3 profiles:\n 1: Jordan, 21\n*** 2: Jenny, 25\n 3: John, 30\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_SHORT message template.\n\nWhile a profile is loaded, the LOAD_PROFILE command could be executed again. The new load will only succeed if the profile is found (as a usual load), otherwise it fails with the usual error when a username cannot be loaded. In this case, the currently-loaded profile remains loaded.\n\nIf the new load succeeds, the system will unload the currently-loaded profile, and load the new profile. For example, if the database has three profiles, and the second profile is successfully loaded, and then the third profile is successfully loaded, then the PRINT_DB command should print the following:\n\nDatabase has 3 profiles:\n 1: Jordan, 21\n 2: Jenny, 25\n*** 3: John, 30\nWhile a profile is loaded, the CREATE_PROFILE command should not be allowed. If the user tries to create a profile while a profile is already loaded, then the following message should be printed:\n\nCannot create a new profile. First unload the profile for <CURRENT_LOADED_PROFILE_USERNAME>.\nCreating a new profile can go ahead, only after the currently-loaded profile is unloaded (see below).\n\nUnloading Profiles\nThe UNLOAD_PROFILE command unloads the currently-loaded profile. This command requires no arguments.\n\nWhen a profile is successfully unloaded, the following message should be printed:\n\nProfile unloaded for <USERNAME>.\nIf there is no currently-loaded profile, then the following message should be printed:\n\nNo profile is currently loaded.\n\nDeleting Profiles\nThe DELETE_PROFILE command deletes a profile from the database. This command requires exactly one argument, representing the username to be deleted.\n\nWhen a profile is successfully deleted, the following message should be printed:\n\nProfile deleted for <USERNAME>.\nWhen a profile is successfully deleted, this means it will no longer exist in the database.\n\nIf the profile is not found, then the following message gets printed:\n\nNo profile found for <USERNAME>. No profile was deleted.\nIf the profile is currently loaded, then the deletion should not go ahead and the following message gets printed:\n\nCannot delete profile for <USERNAME> while loaded. No profile was deleted.\nThe loaded profile must be unloaded before it can be deleted.\n\nIt is however perfectly fine to delete a profile that is not currently loaded, as long as it exists in the database.\n\nTask 3 (Checkpoint #2):\nNow comes the moment we have been waiting for! Time to create some insurance policies! Our insurance system will support three types of policies: car, home, and life.\n\nEach of these policies require various bits of information (which we can refer to as “options”). These are as follows:\n\nHome Policy\nSum insured (how much to insure for, which is always an integer)\nAddress (where the home is located, which is always a String)\nRental (whether the home is rented out, which is always a boolean)\nThe base premium (how much the client must pay) for a home policy is calculated as follows:\n\nIf the home is rented out, then the base premium is 2% of the sum insured.\nIf the home is not rented out, then the base premium is 1% of the sum insured.\nCar Policy\nSum insured (how much to insure for, which is always an integer)\nMake and model (the make and model of the car, which is always a String)\nLicense plate (the license plate of the car, which is always a String)\nMechanical breakdown (whether the car is to be covered for mechanical breakdown, which is always a boolean)\nThe base premium for a car policy is calculated as follows:\n\nIf the client is under 25 years old, then the base premium is 15% of the sum insured.\nIf the client is 25 years old or older, then the base premium is 10% of the sum insured.\nIf the car is to be covered for mechanical breakdown, then the base premium is increased by a further $80 (regardless of age).\nLife Policy\nSum insured (how much to insure for, which is always an integer)\nThe base premium for a life policy is calculated as (1 + age/100)% of the sum-insured. For example, someone who is 25 years old would pay 1.25% of the sum insured, and someone who is 30 years old would pay 1.30% of the sum insured.\n\nThere are two more restrictions regarding life policies:\n\nFirstly, the maximum age for a life policy is 100 years old. The error message would be:\n\n<USERNAME> is over the age limit. No policy was created.\nSecondly, there can only be at most one life policy per client profile. The error message would be:\n\n<USERNAME> already has a life policy. No new policy was created.\nDiscounts\nThe system is able to apply discounts to the base premium of a policy. The discounts are as follows:\n\nIf the client has exactly two policies, then the total premium is reduced by 10% (calculated against the sum of the base premiums).\nIf the client has three or more policies, then the total premium is reduced by 20% (calculated against the sum of the base premiums).\n\nWe create new policies using the POLICY_HOME, POLICY_CAR, and POLICY_LIFE commands. A newly-created policy is always assigned as a policy for the currently-loaded profile. If there is no currently-loaded profile, then the policy creation should not go ahead and the following message should be printed:\n\nNeed to load a profile in order to create a policy.\n\nThese three commands actually operate slightly different from the other commands we have seen. While they do not require any arguments, they still require the user to provide the additional information (the options above). These options will be prompted for by the system one at a time.\n\nFor example, if the user executed the POLICY_HOME command, then the system will prompt the user for the following options:\n\ninsurance system> policy-home\n        Sum to insure: 1000000\n        Property address: 20 Symonds Street\n        Rental? (yes/no): yes\n\nCollecting these options is handled for you. Once collected, they are placed into an array of strings (i.e., the String[] options parameter in the InsuranceSystem.createPolicy() method).\n\nFor the example above, the options array would contain the following:\n\noptions[0] = \"1000000\"\noptions[1] = \"20 Symonds Street\"\noptions[2] = \"yes\"\nYou do not need to handle the situation of invalid options (e.g., if the user enters a non-integer for the sum insured). We will always use valid option types for marking.\n\nNote that different policies will have a different number of options. For example, the POLICY_CAR command will have 4 options, the POLICY_HOME command (example above) will have 3 options, and the POLICY_LIFE command will have 1 option.\n\nWhen successfully creating a policy, the following message should be printed:\n\nNew <TYPE> policy created for <USERNAME>.\nwhere <TYPE> is the type of policy being created (i.e., car, home, or life), and <USERNAME> is the username of the currently-loaded profile.\n\nHint: When you run the program interactively to create a new policy, the system will still prompt for the policy details even if there is no currently-loaded profile. This is fine, as that is the way that the testing framework is set up (to collate all the input in one place before passing it on to the respective method in the InsuranceSystem.java file). Here’s an example of a perfectly valid interaction with the system:\n\ninsurance system> policy-home\n        Sum to insure: 1000000\n        Property address: 20 Symonds Street\n        Rental? (yes/no): yes\nNeed to load a profile in order to create a policy.\ninsurance system> load-profile jordan\nProfile loaded for Jordan.\ninsurance system> policy-home\n        Sum to insure: 1000000\n        Property address: 20 Symonds Street\n        Rental? (yes/no): yes\nNew home policy created for Jordan.\n\nPrinting Policy Details\nAfter you have policies added into the client profiles, the PRINT_DB command should print out the details of the policies as well. There are a few things to note here.\n\nWhen listing the profiles, you should add in their header how many policies they have. Pay attention to the pluralisation of the word “policy” (i.e., “0 policies” versus “1 policy” versus “2 policies”)\n\n 1: Jordan, 21, 1 policy\n 2: Tom, 25, 3 policies\n 3: Jenny, 23, 0 policies\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_MEDIUM message template.\n\nThe details of the policies should also be displayed in the PRINT_DB command.\n\nThe policies within a profile should be printed out in the order that they were created.\n\nThe information printed about each policy is as follows:\n\nHome Policy\nHome Policy (<ADDRESS>, Sum Insured: $<SUM_INSURED>, Premium: $<BASE_PREMIUM> -> $<DISCOUNTED_PREMIUM>)\nFor example, Jenny’s home policy for a rental insured for $1,000,000, without any discounts:\n\nHome Policy (20 Symonds Street, Sum Insured: $1000000, Premium: $20000 -> $20000)\nCar Policy\nCar Policy (<MAKE_AND_MODEL>, Sum Insured: $<SUM_INSURED>, Premium: $<BASE_PREMIUM> -> $<DISCOUNTED_PREMIUM>)\nFor example, Tom’s car policy for a Subaru Impreza insured for $55,000, with mechanical breakdown coverage, and without any discounts:\n\nCar Policy (Subaru Impreza, Sum Insured: $55000, Premium: $5580 -> $5580)\nLife Policy\nLife Policy (Sum Insured: $<SUM_INSURED>, Premium: $<BASE_PREMIUM> -> $<DISCOUNTED_PREMIUM>)\nFor example, Jordan’s life policy insured for $80,000, without any discounts:\n\nLife Policy (Sum Insured: $80000, Premium: $968 -> $968)\n\nPrinting the total to pay\nThe PRINT_DB command needs to also print out the total premium to pay for all the policies for every profile. The total premium is calculated as the sum of the discounted premiums of all the policies for the profile.\n\nFor example, if Jenny has no policies, Jordan has one policy for $500, and Tom has two policies discounted to $180 and $90, then the output will look like this:\n\n1: Jenny, 25, 0 policies for a total of $0\n2: Jordan, 21, 1 policy for a total of $500\n   ... Premium: $500 -> $500)\n3: Tom, 25, 2 policies for a total of $270\n   ... Premium: $200 -> $180)\n   ... Premium: $100 -> $90)\n\nHint: See the MessageCli.PRINT_DB_PROFILE_HEADER_LONG message template.\n***\nThe next section contains the classes provided. The section will be marked between a pair of \"!!!\":\n!!!\nInsuranceSystem.java:\n\npackage nz.ac.auckland.se281;\n\nimport nz.ac.auckland.se281.Main.PolicyType;\n\npublic class InsuranceSystem {\n  public InsuranceSystem() {\n    // Only this constructor can be used (if you need to initialise fields).\n  }\n\n  public void printDatabase() {\n    // TODO: Complete this method.\n  }\n\n  public void createNewProfile(String userName, String age) {\n    // TODO: Complete this method.\n  }\n\n  public void loadProfile(String userName) {\n    // TODO: Complete this method.\n  }\n\n  public void unloadProfile() {\n    // TODO: Complete this method.\n  }\n\n  public void deleteProfile(String userName) {\n    // TODO: Complete this method.\n  }\n\n  public void createPolicy(PolicyType type, String[] options) {\n    // TODO: Complete this method.\n  }\n}\n\nMain.java:\n\npackage nz.ac.auckland.se281;\n\nimport java.util.Scanner;\n\n/** You cannot modify this class! */\npublic class Main {\n  public enum PolicyType {\n    HOME,\n    CAR,\n    LIFE,\n  }\n\n  public enum Command {\n    PRINT_DB(0, \"Print the entire insurance database\"),\n\n    CREATE_PROFILE(2, \"Create a new client profile <USERNAME> <AGE>\"),\n    LOAD_PROFILE(1, \"Load the specified profile <USERNAME>\"),\n    UNLOAD_PROFILE(0, \"Unload the currently-loaded profile\"),\n    DELETE_PROFILE(1, \"Delete the specified profile <USERNAME> from the database\"),\n\n    POLICY_HOME(\n        0,\n        \"Create a new home policy for the currently-loaded profile\",\n        \"Sum to insure\",\n        \"Property address\",\n        \"Rental? (y/n)\"),\n    POLICY_CAR(\n        0,\n        \"Create a new car policy for the currently-loaded profile\",\n        \"Sum to insure\",\n        \"Make and model\",\n        \"License plate\",\n        \"Mechanical warranty? (y/n)\"),\n    POLICY_LIFE(0, \"Create a new life policy for the currently-loaded profile\", \"Sum to insure\"),\n\n    HELP(0, \"Print usage\"),\n    EXIT(0, \"Exit the application\");\n\n    private final int numArgs;\n    private final String message;\n    private final String[] optionPrompts;\n\n    private Command(final int numArgs, final String message) {\n      this(numArgs, message, new String[] {});\n    }\n\n    private Command(final int numArgs, final String message, final String... optionPrompts) {\n      this.numArgs = numArgs;\n      this.message = message;\n      this.optionPrompts = optionPrompts;\n    }\n\n    public boolean hasArguments() {\n      return numArgs > 0;\n    }\n\n    public int getNumArgs() {\n      return numArgs;\n    }\n\n    public boolean hasOptions() {\n      return optionPrompts.length > 0;\n    }\n\n    public int getNumOptions() {\n      return optionPrompts.length;\n    }\n\n    public String getOptionPrompt(final int index) {\n      return optionPrompts[index];\n    }\n  }\n\n  private static final String COMMAND_PREFIX = \"insurance system> \";\n\n  public static void main(final String[] args) {\n    new Main(new Scanner(System.in), new InsuranceSystem()).start();\n  }\n\n  public static String help() {\n    final StringBuilder sb = new StringBuilder();\n\n    for (final Command command : Command.values()) {\n      sb.append(command).append(\"\\t\");\n\n      // Add extra padding to align the argument counts\n      // if the command name is less than the tab width.\n      if (command.toString().length() < 8) {\n        sb.append(\"\\t\");\n      }\n\n      if (command.numArgs > 0) {\n        sb.append(\"[\").append(command.numArgs).append(\" arguments]\");\n      } else {\n        sb.append(\"[no args]\");\n      }\n\n      sb.append(\"\\t\").append(command.message).append(System.lineSeparator());\n    }\n\n    return sb.toString();\n  }\n\n  private static void printBanner() {\n    // https://patorjk.com/software/taag/\n    // https://www.freeformatter.com/java-dotnet-escape.html#before-output\n\n    System.out.println(\n        \"\\r\\n\"\n            + \" $$$$$$\\\\   $$$$$$\\\\    $$\\\\         $$$$$$\\\\\\r\\n\"\n            + \"$$  __$$\\\\ $$  __$$\\\\ $$$$ |        \\\\_$$  _|\\r\\n\"\n            + \"\\\\__/  $$ |$$ /  $$ |\\\\_$$ |          $$ |  $$$$$$$\\\\   $$$$$$$\\\\ $$\\\\   $$\\\\ \"\n            + \" $$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\   $$$$$$$\\\\  $$$$$$\\\\\\r\\n\"\n            + \" $$$$$$  | $$$$$$  |  $$ |          $$ |  $$  __$$\\\\ $$  _____|$$ |  $$ |$$  __$$\\\\\"\n            + \" \\\\____$$\\\\ $$  __$$\\\\ $$  _____|$$  __$$\\\\\\r\\n\"\n            + \"$$  ____/ $$  __$$<   $$ |          $$ |  $$ |  $$ |\\\\$$$$$$\\\\  $$ |  $$ |$$ | \"\n            + \" \\\\__|$$$$$$$ |$$ |  $$ |$$ /      $$$$$$$$ |\\r\\n\"\n            + \"$$ |      $$ /  $$ |  $$ |          $$ |  $$ |  $$ | \\\\____$$\\\\ $$ |  $$ |$$ |    \"\n            + \" $$  __$$ |$$ |  $$ |$$ |      $$   ____|\\r\\n\"\n            + \"$$$$$$$$\\\\ \\\\$$$$$$  |$$$$$$\\\\       $$$$$$\\\\ $$ |  $$ |$$$$$$$  |\\\\$$$$$$  |$$ |   \"\n            + \"  \\\\$$$$$$$ |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$\\\\\\r\\n\"\n            + \"\\\\________| \\\\______/ \\\\______|      \\\\______|\\\\__|  \\\\__|\\\\_______/  \\\\______/\"\n            + \" \\\\__|      \\\\_______|\\\\__|  \\\\__| \\\\_______| \\\\_______|\\r\\n\");\n  }\n\n  private final Scanner scanner;\n\n  private final InsuranceSystem insuranceSystem;\n\n  public Main(final Scanner scanner, final InsuranceSystem insuranceSystem) {\n    this.scanner = scanner;\n    this.insuranceSystem = insuranceSystem;\n  }\n\n  public void start() {\n    printBanner();\n    System.out.println(help());\n\n    String command;\n\n    // Prompt and process commands until the exit command.\n    do {\n      System.out.print(COMMAND_PREFIX);\n      command = scanner.nextLine().trim();\n    } while (processCommand(command));\n  }\n\n  private boolean processCommand(String input) {\n    // Remove whitespace at the beginning and end of the input.\n    input = input.trim();\n\n    final String[] args = input.split(\" \");\n\n    // Allow any case, and dashes to be used instead of underscores.\n    final String commandStr = args[0].toUpperCase().replaceAll(\"-\", \"_\");\n\n    final Command command;\n\n    try {\n      // Command names correspond to the enum names.\n      command = Command.valueOf(commandStr);\n    } catch (final Exception e) {\n      MessageCli.COMMAND_NOT_FOUND.printMessage(commandStr);\n      return true;\n    }\n\n    if (!checkArgs(command, args)) {\n      MessageCli.WRONG_ARGUMENT_COUNT.printMessage(\n          String.valueOf(command.getNumArgs()), command.getNumArgs() > 1 ? \"s\" : \"\", commandStr);\n      return true;\n    }\n\n    switch (command) {\n      case CREATE_PROFILE:\n        insuranceSystem.createNewProfile(args[1], args[2]);\n        break;\n      case LOAD_PROFILE:\n        insuranceSystem.loadProfile(args[1]);\n        break;\n      case UNLOAD_PROFILE:\n        insuranceSystem.unloadProfile();\n        break;\n      case DELETE_PROFILE:\n        insuranceSystem.deleteProfile(args[1]);\n        break;\n      case PRINT_DB:\n        insuranceSystem.printDatabase();\n        break;\n      case POLICY_HOME:\n        insuranceSystem.createPolicy(PolicyType.HOME, processOptions(command));\n        break;\n      case POLICY_CAR:\n        insuranceSystem.createPolicy(PolicyType.CAR, processOptions(command));\n        break;\n      case POLICY_LIFE:\n        insuranceSystem.createPolicy(PolicyType.LIFE, processOptions(command));\n        break;\n      case EXIT:\n        MessageCli.END.printMessage();\n\n        // Signal that the program should exit.\n        return false;\n      case HELP:\n        System.out.println(help());\n        break;\n    }\n\n    // Signal that another command is expected.\n    return true;\n  }\n\n  private String[] processOptions(final Command command) {\n    final String[] options = new String[command.getNumOptions()];\n\n    for (int i = 0; i < command.getNumOptions(); i++) {\n      System.out.print(\"\\t\" + command.getOptionPrompt(i) + \": \");\n      options[i] = scanner.nextLine().trim();\n    }\n\n    return options;\n  }\n\n  private boolean checkArgs(final Command command, final String[] args) {\n    return command.getNumArgs() == args.length - 1;\n  }\n}\n\nMessageCli.java:\n\npackage nz.ac.auckland.se281;\n\n/** You cannot modify this class! */\npublic enum MessageCli {\n  COMMAND_NOT_FOUND(\n      \"Error! Command not found! (run 'help' for the list of available commands): \\\"%s\\\"\"),\n  WRONG_ARGUMENT_COUNT(\n      \"Error! Incorrect number of arguments provided. Expected %s argument%s for the \\\"%s\\\"\"\n          + \" command\"),\n\n  PRINT_DB_POLICY_COUNT(\"Database has %s profile%s%s\"),\n  PRINT_DB_PROFILE_HEADER_MINIMAL(\" %s: %s, %s\"),\n  PRINT_DB_PROFILE_HEADER_SHORT(\" %s%s: %s, %s\"),\n  PRINT_DB_PROFILE_HEADER_MEDIUM(\" %s%s: %s, %s, %s polic%s\"),\n  PRINT_DB_PROFILE_HEADER_LONG(\" %s%s: %s, %s, %s polic%s for a total of $%s\"),\n\n  PRINT_DB_CAR_POLICY(\"\\tCar Policy (%s, Sum Insured: $%s, Premium: $%s -> $%s)\"),\n  PRINT_DB_HOME_POLICY(\"\\tHome Policy (%s, Sum Insured: $%s, Premium: $%s -> $%s)\"),\n  PRINT_DB_LIFE_POLICY(\"\\tLife Policy (Sum Insured: $%s, Premium: $%s -> $%s)\"),\n\n  INVALID_USERNAME_TOO_SHORT(\n      \"'%s' is an invalid username, it should be at least 3 characters long. No profile was\"\n          + \" created.\"),\n  INVALID_USERNAME_NOT_UNIQUE(\"Usernames must be unique. No profile was created for '%s'.\"),\n  INVALID_AGE(\n      \"'%s' is an invalid age, please provide a positive whole number only. No profile was created\"\n          + \" for %s.\"),\n\n  CANNOT_CREATE_WHILE_LOADED(\"Cannot create a new profile. First unload the profile for %s.\"),\n\n  PROFILE_CREATED(\"New profile created for %s with age %s.\"),\n  PROFILE_DELETED(\"Profile deleted for %s.\"),\n  PROFILE_LOADED(\"Profile loaded for %s.\"),\n  PROFILE_UNLOADED(\"Profile unloaded for %s.\"),\n\n  NO_PROFILE_FOUND_TO_LOAD(\"No profile found for %s. Profile not loaded.\"),\n  NO_PROFILE_FOUND_TO_DELETE(\"No profile found for %s. No profile was deleted.\"),\n  NO_PROFILE_FOUND_TO_CREATE_POLICY(\"Need to load a profile in order to create a policy.\"),\n\n  NO_PROFILE_LOADED(\"No profile is currently loaded.\"),\n  CANNOT_DELETE_PROFILE_WHILE_LOADED(\n      \"Cannot delete profile for %s while loaded. No profile was deleted.\"),\n\n  NEW_POLICY_CREATED(\"New %s policy created for %s.\"),\n  ALREADY_HAS_LIFE_POLICY(\"%s already has a life policy. No new policy was created.\"),\n  OVER_AGE_LIMIT_LIFE_POLICY(\"%s is over the age limit. No policy was created.\"),\n\n  DISCOUNT_TWO(\"Two policies are in place, client will get 10% discount\"),\n  DISCOUNT_MULTIPLE(\"Multiple policies are in place, client will get 20% discount\"),\n\n  END(\"You closed the terminal. Goodbye.\");\n\n  private final String msg;\n\n  private MessageCli(final String msg) {\n    this.msg = msg;\n  }\n\n  public String getMessage(final String... args) {\n    String tmpMessage = msg;\n\n    for (final String arg : args) {\n      tmpMessage = tmpMessage.replaceFirst(\"%s\", arg);\n    }\n\n    return tmpMessage;\n  }\n\n  public void printMessage(final String... args) {\n    System.out.println(getMessage(args));\n  }\n\n  @Override\n  public String toString() {\n    return msg;\n  }\n}\n!!!\nThe following section provides the test cases needed to pass. The section is marked between a pair of \"###\".\n###\npackage nz.ac.auckland.se281;\n\nimport static nz.ac.auckland.se281.Main.Command.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\nimport org.junit.runners.Suite.SuiteClasses;\n\n@RunWith(Suite.class)\n@SuiteClasses({\n        MainTest.Task1.class,\n        MainTest.Task2.class, // Uncomment this line when to start Task 2\n        MainTest.Task3.class, // Uncomment this line when to start Task 3\n  // MainTest.YourTests.class, // Uncomment this line to run your own tests\n})\npublic class MainTest {\n  public static class Task1 extends CliTest {\n    public Task1() {\n      super(Main.class);\n    }\n\n    @Test\n    public void T1_01_empty_database() throws Exception {\n      runCommands(PRINT_DB);\n      assertContains(\"Database has 0 profiles.\");\n    }\n\n    @Test\n    public void T1_02_add_one_client() throws Exception {\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", PRINT_DB);\n      assertContains(\"Database has 1 profile:\");\n      assertContains(\"New profile created for Jordan with age 21.\");\n      assertDoesNotContain(\"Database has 0 profiles\", true);\n    }\n\n    @Test\n    public void T1_03_add_one_client_with_info() throws Exception {\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", PRINT_DB);\n      assertContains(\"Database has 1 profile:\");\n      assertContains(\"New profile created for Jordan with age 21.\");\n      assertContains(\"1: Jordan, 21\");\n      assertDoesNotContain(\"Database has 0 profiles\", true);\n    }\n\n    @Test\n    public void T1_04_ignore_short_name() throws Exception {\n      runCommands(CREATE_PROFILE, \"Jo\", \"21\", PRINT_DB);\n      assertContains(\"Database has 0 profiles.\");\n      assertContains(\n          \"'Jo' is an invalid username, it should be at least 3 characters long. No profile was\"\n              + \" created.\");\n      assertDoesNotContain(\"Database has 1 profiles\", true);\n      assertDoesNotContain(\"New profile created\", true);\n      assertDoesNotContain(\"21\");\n    }\n\n    @Test\n    public void T1_05_add_two_clients() throws Exception {\n      runCommands(CREATE_PROFILE, \"Jordan\", \"21\", CREATE_PROFILE, \"Tom\", \"25\", PRINT_DB);\n      assertContains(\"Database has 2 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertDoesNotContain(\"Database has 0 profiles\", true);\n      assertDoesNotContain(\"Database has 1 profile\", true);\n    }\n\n    @Test\n    public void T1_06_username_to_titlecase() throws Exception {\n      runCommands(CREATE_PROFILE, \"jorDan\", \"21\", CREATE_PROFILE, \"TOM\", \"25\", PRINT_DB);\n      assertContains(\"Database has 2 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertDoesNotContain(\"jorDan\");\n      assertDoesNotContain(\"TOM\");\n    }\n  }\n\n  public static class Task2 extends CliTest {\n    public Task2() {\n      super(Main.class);\n    }\n\n    @Test\n    public void T2_01_load_profile_found() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"Tom\"));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertDoesNotContain(\"No profile found for Tom. Profile not loaded.\", true);\n    }\n\n    @Test\n    public void T2_02_load_profile_not_found() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"Alex\"));\n\n      assertContains(\"No profile found for Alex. Profile not loaded.\");\n      assertDoesNotContain(\"Profile loaded for Alex.\", true);\n    }\n\n    @Test\n    public void T2_03_load_profile_found_display() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"Tom\", PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"*** 2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n\n    @Test\n    public void T2_04_load_profile_switch_profiles() throws Exception {\n      runCommands(\n          unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"tom\", LOAD_PROFILE, \"jenny\", PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertContains(\"Profile loaded for Jenny.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"*** 3: Jenny, 23\");\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n    }\n\n    @Test\n    public void T2_05_unload_profile() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"Jenny\", UNLOAD_PROFILE, PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n      assertContains(\"Profile unloaded for Jenny.\");\n\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n    }\n\n    @Test\n    public void T2_06_unload_invalid_profile() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"jen\", UNLOAD_PROFILE, PRINT_DB));\n\n      assertContains(\"No profile is currently loaded.\");\n\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n\n      assertDoesNotContain(\"*** 1: Jordan, 21\", true);\n      assertDoesNotContain(\"*** 2: Tom, 25\", true);\n      assertDoesNotContain(\"*** 3: Jenny, 23\", true);\n    }\n\n    @Test\n    public void T2_07_delete_profile_found() throws Exception {\n      runCommands(unpack(CREATE_SOME_CLIENTS, DELETE_PROFILE, \"jordan\", PRINT_DB));\n\n      assertContains(\"Profile deleted for Jordan.\");\n      assertContains(\"Database has 2 profiles:\");\n      assertContains(\"1: Tom, 25\");\n      assertContains(\"2: Jenny, 23\");\n      assertDoesNotContain(\"Jordan, 21\", true);\n    }\n\n    @Test\n    public void T2_08_delete_profile_while_loaded() throws Exception {\n      runCommands(\n          unpack(CREATE_SOME_CLIENTS, LOAD_PROFILE, \"Jenny\", DELETE_PROFILE, \"jenny\", PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n\n      assertContains(\"Cannot delete profile for Jenny while loaded. No profile was deleted.\");\n      assertDoesNotContain(\"Profile deleted for Jenny\", true);\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21\");\n      assertContains(\"2: Tom, 25\");\n      assertContains(\"3: Jenny, 23\");\n    }\n  }\n\n  public static class Task3 extends CliTest {\n    public Task3() {\n      super(Main.class);\n    }\n\n    @Test\n    public void T3_01_cannot_add_policy_without_loaded_profile() throws Exception {\n      runCommands(\n          unpack(CREATE_SOME_CLIENTS, POLICY_HOME, options(\"1000000\", \"20 Symonds Street\", \"yes\")));\n\n      assertContains(\"Need to load a profile in order to create a policy.\");\n      assertDoesNotContain(\"New home policy created\", true);\n    }\n\n    @Test\n    public void T3_02_add_home_policy_loaded_profile() throws Exception {\n      runCommands(\n          unpack(\n              CREATE_SOME_CLIENTS,\n              LOAD_PROFILE,\n              \"Jenny\",\n              POLICY_HOME,\n              options(\"1000000\", \"20 Symonds Street\", \"yes\"),\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21, 0 policies\");\n      assertContains(\"2: Tom, 25, 0 policies\");\n      assertContains(\"*** 3: Jenny, 23, 1 policy\");\n\n      assertContains(\"New home policy created for Jenny.\");\n\n      assertContains(\n          \"Home Policy (20 Symonds Street, Sum Insured: $1000000, Premium: $20000 -> $20000)\");\n    }\n\n    @Test\n    public void T3_03_add_car_policy_loaded_profile() throws Exception {\n      runCommands(\n          unpack(\n              CREATE_SOME_CLIENTS,\n              LOAD_PROFILE,\n              \"Tom\",\n              POLICY_CAR,\n              options(\"55000\", \"Subaru Impreza\", \"SUB123\", \"yes\"),\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Tom.\");\n      assertContains(\"New car policy created for Tom.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21, 0 policies\");\n      assertContains(\"*** 2: Tom, 25, 1 policy\");\n      assertContains(\"3: Jenny, 23, 0 policies\");\n\n      assertContains(\"Car Policy (Subaru Impreza, Sum Insured: $55000, Premium: $5580 -> $5580)\");\n    }\n\n    @Test\n    public void T3_04_two_different_policies_home_life_one_profile() throws Exception {\n      runCommands(\n          unpack(\n              CREATE_SOME_CLIENTS,\n              LOAD_PROFILE,\n              \"Jenny\",\n              POLICY_HOME,\n              options(\"1000000\", \"20 Symonds Street\", \"yes\"),\n              POLICY_LIFE,\n              options(\"1000000\"),\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n      assertContains(\"New home policy created for Jenny.\");\n      assertContains(\"New life policy created for Jenny.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21, 0 policies\");\n      assertContains(\"2: Tom, 25, 0 policies\");\n      assertContains(\"*** 3: Jenny, 23, 2 policies\");\n\n      assertContains(\n          \"Home Policy (20 Symonds Street, Sum Insured: $1000000, Premium: $20000 -> $18000)\");\n      assertContains(\"Life Policy (Sum Insured: $1000000, Premium: $12300 -> $11070)\");\n    }\n\n    @Test\n    public void T3_05_three_policies_one_profile() throws Exception {\n      runCommands(\n          unpack(\n              CREATE_SOME_CLIENTS,\n              LOAD_PROFILE,\n              \"Jenny\",\n              POLICY_HOME,\n              options(\"1000000\", \"20 Symonds Street\", \"yes\"),\n              POLICY_HOME,\n              options(\"1000000\", \"20 Queen Street\", \"no\"),\n              POLICY_LIFE,\n              options(\"1000000\"),\n              PRINT_DB));\n\n      assertContains(\"Profile loaded for Jenny.\");\n      assertContains(\"New home policy created for Jenny.\");\n      assertContains(\"New life policy created for Jenny.\");\n\n      assertContains(\"Database has 3 profiles:\");\n      assertContains(\"1: Jordan, 21, 0 policies\");\n      assertContains(\"2: Tom, 25, 0 policies\");\n      assertContains(\"*** 3: Jenny, 23, 3 policies\");\n\n      assertContains(\n          \"Home Policy (20 Symonds Street, Sum Insured: $1000000, Premium: $20000 -> $16000)\");\n      assertContains(\n          \"Home Policy (20 Queen Street, Sum Insured: $1000000, Premium: $10000 -> $8000)\");\n      assertContains(\"Life Policy (Sum Insured: $1000000, Premium: $12300 -> $9840)\");\n    }\n\n    @Test\n    public void T3_06_life_policy_over_age_limit() throws Exception {\n      runCommands(\n          CREATE_PROFILE,\n          \"Jenny\",\n          101,\n          LOAD_PROFILE,\n          \"Jenny\",\n          POLICY_LIFE,\n          options(\"100000\"),\n          UNLOAD_PROFILE,\n          PRINT_DB);\n\n      assertContains(\"Profile loaded for Jenny.\");\n      assertContains(\"Jenny is over the age limit. No policy was created.\");\n\n      assertContains(\"Database has 1 profile:\");\n      assertContains(\"1: Jenny, 101, 0 policies\");\n\n      assertDoesNotContain(\"New life policy created for Jenny.\", true);\n      assertDoesNotContain(\"Life Policy (Sum Insured\", true);\n    }\n\n    @Test\n    public void T3_07_two_policies_one_profile_ignore_zero_policy_total_costs() throws Exception {\n      runCommands(\n          unpack( //\n              CREATE_SOME_CLIENTS, //\n              LOAD_PROFILE,\n              \"Tom\", //\n              POLICY_HOME,\n              options(\"1000000\", \"20 Symonds Street\", \"yes\"), //\n              POLICY_CAR,\n              options(\"55000\", \"Subaru Impreza\", \"SUB123\", \"no\"), //\n              UNLOAD_PROFILE, //\n              LOAD_PROFILE,\n              \"Jenny\", //\n              POLICY_CAR,\n              options(\"55000\", \"Subaru Impreza\", \"SUB123\", \"no\"), //\n              UNLOAD_PROFILE, //\n              PRINT_DB));\n\n      assertContains(\"2: Tom, 25, 2 policies for a total of $22950\");\n      assertContains(\"3: Jenny, 23, 1 policy for a total of $8250\");\n\n      assertContains(\n          \"Home Policy (20 Symonds Street, Sum Insured: $1000000, Premium: $20000 -> $18000)\");\n      assertContains(\"Car Policy (Subaru Impreza, Sum Insured: $55000, Premium: $5500 -> $4950)\");\n      assertContains(\"Car Policy (Subaru Impreza, Sum Insured: $55000, Premium: $8250 -> $8250)\");\n    }\n  }\n\n  public static class YourTests extends CliTest {\n    public YourTests() {\n      super(Main.class);\n    }\n\n    @Test\n    public void TY_01_your_own_test() throws Exception {\n      // Write your own test here, in the same format as the other tests.\n      runCommands(PRINT_DB);\n      assertContains(\"\");\n    }\n\n    @Test\n    public void TY_02_your_own_test() throws Exception {\n      // Write your own test here, in the same format as the other tests.\n      runCommands(PRINT_DB);\n      assertContains(\"\");\n    }\n  }\n\n  private static final Object[] CREATE_SOME_CLIENTS =\n      new Object[] {\n        CREATE_PROFILE, \"Jordan\", \"21\", //\n        CREATE_PROFILE, \"Tom\", \"25\", //\n        CREATE_PROFILE, \"Jenny\", \"23\",\n      };\n\n  private static Object[] unpack(Object[] commands, Object... more) {\n    final List<Object> all = new ArrayList<Object>();\n    all.addAll(List.of(commands));\n    all.addAll(List.of(more));\n    return all.toArray(new Object[all.size()]);\n  }\n\n  private static String[] options(String... options) {\n    final List<String> all = new ArrayList<String>();\n    all.addAll(List.of(options));\n    return all.toArray(new String[all.size()]);\n  }\n}\n###"}],
  "temperature": 0.5
}